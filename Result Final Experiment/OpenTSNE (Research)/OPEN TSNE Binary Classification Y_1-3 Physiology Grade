{"cells":[{"cell_type":"markdown","metadata":{"id":"ZfrQQl8q8j_l"},"source":["### **YEAR 1 - PHYSIOLOGY MARK**"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"xsDqxGYI82EU","executionInfo":{"status":"ok","timestamp":1737707123731,"user_tz":-420,"elapsed":7005,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["import pandas as pd\n","from sklearn.metrics import classification_report, confusion_matrix"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":70104,"status":"ok","timestamp":1737707193829,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"YqLVSEMh8V_8","outputId":"077ffbd9-3fec-4ee3-b94c-b9416bcc6114"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"646I3UMVxQAI"},"source":["### **1. Read Data**"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"Npc-ZSEet26p","executionInfo":{"status":"ok","timestamp":1737707215298,"user_tz":-420,"elapsed":21473,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["batch1213_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1213-data-GRADED.xlsx', skiprows=5)\n","batch1213_preuni_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1213-data-GRADED.xlsx',skiprows=4, sheet_name='preuni')\n","batch1213_pro1_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1213-data-GRADED.xlsx', skiprows=2, sheet_name='pro1')\n","\n","\n","batch1314_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1314-data-GRADED.xlsx', skiprows=5)\n","batch1314_preuni_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1314-data-GRADED.xlsx',skiprows=4, sheet_name='preuni')\n","batch1314_pro1_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1314-data-GRADED.xlsx', skiprows=5, sheet_name='pro1')\n","\n","\n","batch1415_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1415-data-GRADED.xlsx', skiprows=5)\n","batch1415_preuni_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1415-data-GRADED.xlsx',skiprows=4, sheet_name='preuni')\n","batch1415_pro1_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1415-data-GRADED.xlsx', skiprows=2, sheet_name='pro1')\n","\n","\n","batch1516_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1516-data-graded.xlsx', skiprows=5)\n","batch1516_preuni_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1516-data-graded.xlsx',skiprows=4, sheet_name='preuni')\n","batch1516_pro1_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1516-data-graded.xlsx', skiprows=2, sheet_name='pro1')\n","\n","\n","batch1617_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1617-data-GRADED.xlsx', skiprows=5)\n","batch1617_preuni_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1617-data-GRADED.xlsx',skiprows=5, sheet_name='preuni')\n","batch1617_pro1_df= pd.read_excel ('/content/drive/MyDrive/AI_Education-main/data/batch1617-data-GRADED.xlsx', skiprows=5, sheet_name='pro1')"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Khay3x2euaBU","executionInfo":{"status":"ok","timestamp":1737707216618,"user_tz":-420,"elapsed":1327,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["\n","# Batch 1213\n","merged_batch1213 = pd.merge(batch1213_df, batch1213_preuni_df, on=\"STUDENT'S IDENTITY NO. \")\n","merged_batch1213 = pd.merge(merged_batch1213, batch1213_pro1_df, on=\"STUDENT'S IDENTITY NO. \")\n","\n","# Batch 1314\n","merged_batch1314 = pd.merge(batch1314_df, batch1314_preuni_df, on=\"STUDENT'S IDENTITY NO. \")\n","merged_batch1314 = pd.merge(merged_batch1314, batch1314_pro1_df, on=\"STUDENT'S IDENTITY NO. \")\n","\n","# Batch 1415\n","merged_batch1415 = pd.merge(batch1415_df, batch1415_preuni_df, on=\"STUDENT'S IDENTITY NO. \")\n","merged_batch1415 = pd.merge(merged_batch1415, batch1415_pro1_df, on=\"STUDENT'S IDENTITY NO. \")\n","\n","# Batch 1516\n","merged_batch1516 = pd.merge(batch1516_df, batch1516_preuni_df, on=\"STUDENT'S IDENTITY NO. \")\n","merged_batch1516 = pd.merge(merged_batch1516, batch1516_pro1_df, on=\"STUDENT'S IDENTITY NO. \")\n","\n","\n","# Batch 1617\n","merged_batch1617 = pd.merge(batch1617_df, batch1617_preuni_df, on=\"STUDENT'S IDENTITY NO. \")\n","merged_batch1617 = pd.merge(merged_batch1617, batch1617_pro1_df, on=\"STUDENT'S IDENTITY NO. \")"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"5N_EYnRauv3-","executionInfo":{"status":"ok","timestamp":1737707216620,"user_tz":-420,"elapsed":64,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# Menggabungkan batch 1213, 1314, 1415, 1516, dan 1617\n","df = pd.concat([merged_batch1213, merged_batch1314, merged_batch1415, merged_batch1516, merged_batch1617], ignore_index=True)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":62,"status":"ok","timestamp":1737707216620,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"TT9SizMetrVe","outputId":"331843c8-a2aa-4c19-aea7-91f560907d91"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 285 entries, 0 to 284\n","Data columns (total 46 columns):\n"," #   Column                   Non-Null Count  Dtype  \n","---  ------                   --------------  -----  \n"," 0   NO._x                    285 non-null    int64  \n"," 1   STUDENT'S IDENTITY NO.   285 non-null    object \n"," 2   LAST DIGIT MATRIC NO.    285 non-null    int64  \n"," 3   GENDER                   285 non-null    object \n"," 4   AGE DURING ADMISSION     278 non-null    float64\n"," 5   BIRTH DATE               220 non-null    object \n"," 6   MIDDLE IC NO.            59 non-null     float64\n"," 7   DISTRICT                 277 non-null    object \n"," 8   POSCODE                  268 non-null    object \n"," 9   STATE                    279 non-null    object \n"," 10  COUNTRY                  281 non-null    object \n"," 11  NO._y                    285 non-null    int64  \n"," 12  PRE-UNIVERSITY           264 non-null    object \n"," 13   SEM 1                   258 non-null    float64\n"," 14  SEM 2                    258 non-null    float64\n"," 15  SEM 3                    258 non-null    float64\n"," 16  SEM 4                    191 non-null    float64\n"," 17  SEM 5                    127 non-null    float64\n"," 18  TOTAL_SEM                258 non-null    float64\n"," 19  AVERAGE_CGPA             258 non-null    float64\n"," 20  FINAL_CGPA               258 non-null    float64\n"," 21  NO.                      285 non-null    float64\n"," 22  ANATOMY MARK             285 non-null    float64\n"," 23  GRADING                  285 non-null    object \n"," 24  ANATOMY STATUS           285 non-null    object \n"," 25  PHYSIOLOGY MARK          285 non-null    float64\n"," 26  GRADING.1                285 non-null    object \n"," 27  PHYSIOLOGY STATUS        285 non-null    object \n"," 28  BIOCHEMISTRY MARK        285 non-null    float64\n"," 29  GRADING.2                285 non-null    object \n"," 30  BIOCHEMISTRY STATUS      285 non-null    object \n"," 31  ORAL BIOLOGY MARK        285 non-null    float64\n"," 32  GRADING.3                285 non-null    object \n"," 33  ORAL BIOLOGY STATUS      285 non-null    object \n"," 34   BIRTH DATE              59 non-null     float64\n"," 35  MIDDLE I/C NO.           220 non-null    object \n"," 36  SEM 6                    5 non-null      float64\n"," 37  ORAL BIOLOGY RESIT       2 non-null      object \n"," 38  RESIT STATUS             7 non-null      object \n"," 39   SEM 4                   44 non-null     float64\n"," 40  ANATOMY RESIT            6 non-null      float64\n"," 41  PHYSIOLOGY RESIT         1 non-null      float64\n"," 42  RESIT STATUS.1           1 non-null      object \n"," 43  BIOCHEMISTRY RESIT       5 non-null      float64\n"," 44  RESIT STATUS.2           5 non-null      object \n"," 45  RESIT STATUS.3           1 non-null      object \n","dtypes: float64(21), int64(3), object(22)\n","memory usage: 102.6+ KB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":59,"status":"ok","timestamp":1737707216621,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"2RFxW9bzttiE","outputId":"9c26702b-1292-42b8-fbde-110a129f6629"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['NO._x', 'STUDENT'S IDENTITY NO. ', 'LAST DIGIT MATRIC NO.', 'GENDER',\n","       'AGE DURING ADMISSION', 'BIRTH DATE', 'MIDDLE IC NO.', 'DISTRICT',\n","       'POSCODE', 'STATE', 'COUNTRY', 'NO._y', 'PRE-UNIVERSITY', ' SEM 1',\n","       'SEM 2', 'SEM 3', 'SEM 4', 'SEM 5', 'TOTAL_SEM', 'AVERAGE_CGPA',\n","       'FINAL_CGPA', 'NO.', 'ANATOMY MARK', 'GRADING', 'ANATOMY STATUS',\n","       'PHYSIOLOGY MARK', 'GRADING.1', 'PHYSIOLOGY STATUS',\n","       'BIOCHEMISTRY MARK', 'GRADING.2', 'BIOCHEMISTRY STATUS',\n","       'ORAL BIOLOGY MARK', 'GRADING.3', 'ORAL BIOLOGY STATUS', ' BIRTH DATE',\n","       'MIDDLE I/C NO.', 'SEM 6', 'ORAL BIOLOGY RESIT', 'RESIT STATUS',\n","       ' SEM 4', 'ANATOMY RESIT', 'PHYSIOLOGY RESIT', 'RESIT STATUS.1',\n","       'BIOCHEMISTRY RESIT', 'RESIT STATUS.2', 'RESIT STATUS.3'],\n","      dtype='object')"]},"metadata":{},"execution_count":7}],"source":["df.columns"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"7eOsiqW5rFc_","executionInfo":{"status":"ok","timestamp":1737707216621,"user_tz":-420,"elapsed":53,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["df_copy = df.copy()"]},{"cell_type":"markdown","metadata":{"id":"3S1rO6My95zv"},"source":["### **2. Data Preparation**"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"CMRsUIxWufMA","executionInfo":{"status":"ok","timestamp":1737707216622,"user_tz":-420,"elapsed":53,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# Kolom yang ingin dihapus\n","columns_to_drop = ['NO._x', \"STUDENT'S IDENTITY NO. \", 'LAST DIGIT MATRIC NO.', 'GENDER', 'BIRTH DATE', 'MIDDLE IC NO.', 'DISTRICT', 'GRADING', \"GRADING.1\",\n","                   'POSCODE', 'COUNTRY', 'NO._y', 'PRE-UNIVERSITY', ' SEM 1', 'SEM 2', 'SEM 3', 'SEM 4', 'SEM 5', 'NO.', 'ANATOMY MARK', 'ANATOMY STATUS',\n","                   'BIOCHEMISTRY MARK', 'GRADING.2', 'BIOCHEMISTRY STATUS', 'ORAL BIOLOGY MARK', 'GRADING.3', 'PHYSIOLOGY STATUS',\n","                   'ORAL BIOLOGY STATUS', ' BIRTH DATE', 'MIDDLE I/C NO.', 'SEM 6', 'ORAL BIOLOGY RESIT', 'RESIT STATUS', ' SEM 4', 'ANATOMY RESIT', 'PHYSIOLOGY RESIT',\n","                   'RESIT STATUS.1', 'BIOCHEMISTRY RESIT', 'RESIT STATUS.2', 'RESIT STATUS.3']\n","df_copy.drop(columns=columns_to_drop, inplace=True)"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"cpHBzUEjOL8D","executionInfo":{"status":"ok","timestamp":1737707216622,"user_tz":-420,"elapsed":51,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["df_copy['PHYSIOLOGY STATUS'] = df_copy['PHYSIOLOGY MARK'].apply(lambda x: 'PASS' if 50 <= x <= 100 else 'FAIL')"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"583w_GOtnRjK","executionInfo":{"status":"ok","timestamp":1737707216622,"user_tz":-420,"elapsed":50,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# Kolom yang ingin dihapus\n","columns_to_drop = ['PHYSIOLOGY MARK']\n","df_copy.drop(columns=columns_to_drop, inplace=True)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"elapsed":50,"status":"ok","timestamp":1737707216623,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"slqWWHxGs0i5","outputId":"4537d81a-81b2-412e-d16c-42d0cd501906"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["AGE DURING ADMISSION     7\n","STATE                    6\n","TOTAL_SEM               27\n","AVERAGE_CGPA            27\n","FINAL_CGPA              27\n","PHYSIOLOGY STATUS        0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>AGE DURING ADMISSION</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>STATE</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>TOTAL_SEM</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>AVERAGE_CGPA</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>FINAL_CGPA</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>PHYSIOLOGY STATUS</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}],"source":["df_copy.isnull().sum()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"O7-2SY3Vt6_r","executionInfo":{"status":"ok","timestamp":1737707216623,"user_tz":-420,"elapsed":47,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# Mengisi nilai null pada kolom STATE dengan nilai modus\n","mode_state = df_copy['STATE'].mode()[0]  # Mengambil nilai modus\n","df_copy['STATE'] = df_copy['STATE'].fillna(mode_state)\n","\n","# Hapus baris yang memiliki nilai null (NaN) pada kolom FINAL_CGPA\n","df_copy = df_copy[df_copy['FINAL_CGPA'].notna()]\n","\n","# Mengubah nilai pada kolom agar format pada nilai tersebut menjadi int\n","df_copy['AGE DURING ADMISSION'] = df_copy['AGE DURING ADMISSION'].astype(int)\n","df_copy['TOTAL_SEM'] = df_copy['TOTAL_SEM'].astype(int)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1737707216624,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"FEh_OQHTv6m4","outputId":"26fca09b-e773-4492-d139-4876fa4f2831"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["AGE DURING ADMISSION    0\n","STATE                   0\n","TOTAL_SEM               0\n","AVERAGE_CGPA            0\n","FINAL_CGPA              0\n","PHYSIOLOGY STATUS       0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>AGE DURING ADMISSION</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>STATE</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TOTAL_SEM</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>AVERAGE_CGPA</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>FINAL_CGPA</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PHYSIOLOGY STATUS</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}],"source":["df_copy.isnull().sum()"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1737707216627,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"rtFKtde7zOH3","outputId":"693bbbd7-dcea-4416-f538-d38d922c0efb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['AGE DURING ADMISSION', 'STATE', 'TOTAL_SEM', 'AVERAGE_CGPA',\n","       'FINAL_CGPA', 'PHYSIOLOGY STATUS'],\n","      dtype='object')"]},"metadata":{},"execution_count":15}],"source":["df_copy.columns"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40,"status":"ok","timestamp":1737707216628,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"R2fqZ3aPxd86","outputId":"841ecaaf-2890-4a78-c9c6-4bfc5c9716b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 258 entries, 1 to 283\n","Data columns (total 6 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   AGE DURING ADMISSION  258 non-null    int64  \n"," 1   STATE                 258 non-null    object \n"," 2   TOTAL_SEM             258 non-null    int64  \n"," 3   AVERAGE_CGPA          258 non-null    float64\n"," 4   FINAL_CGPA            258 non-null    float64\n"," 5   PHYSIOLOGY STATUS     258 non-null    object \n","dtypes: float64(2), int64(2), object(2)\n","memory usage: 14.1+ KB\n"]}],"source":["df_copy.info()"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"3NSaBFGCxjMV","executionInfo":{"status":"ok","timestamp":1737707216628,"user_tz":-420,"elapsed":38,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["x = df_copy.drop(['PHYSIOLOGY STATUS'], axis =1)\n","y = df_copy['PHYSIOLOGY STATUS']"]},{"cell_type":"markdown","metadata":{"id":"TrB0k7KpTezQ"},"source":["**Divide the data into train and test data**"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"Z6UKku52uG5Q","executionInfo":{"status":"ok","timestamp":1737707216629,"user_tz":-420,"elapsed":37,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=2022)"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2539,"status":"ok","timestamp":1737707219131,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"vHlieckcpBVY","outputId":"3e8532e4-f345-4f26-a82f-da1cd1d4c7d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting openTSNE\n","  Downloading openTSNE-1.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.8 kB)\n","Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.11/dist-packages (from openTSNE) (1.26.4)\n","Requirement already satisfied: scikit-learn>=0.20 in /usr/local/lib/python3.11/dist-packages (from openTSNE) (1.6.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from openTSNE) (1.13.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.20->openTSNE) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.20->openTSNE) (3.5.0)\n","Downloading openTSNE-1.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.2/3.2 MB\u001b[0m \u001b[31m37.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: openTSNE\n","Successfully installed openTSNE-1.0.2\n"]}],"source":["pip install openTSNE"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7924,"status":"ok","timestamp":1737707227047,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"_NKqlJVssrmN","outputId":"ca227f69-22ba-4953-b53e-c863ff114085"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dimensi awal:\n","X_train shape: (154, 5)\n","X_test shape: (104, 5)\n","\n","Dimensi setelah One-Hot Encoding:\n","x_train_encoded shape: (154, 24)\n","x_test_encoded shape: (104, 24)\n","\n","Dimensi data non-STATE:\n","x_train_non_state shape: (154, 4)\n","x_test_non_state shape: (104, 4)\n","--------------------------------------------------------------------------------\n","TSNE(early_exaggeration=12, n_components=3, n_jobs=8, random_state=42,\n","     verbose=True)\n","--------------------------------------------------------------------------------\n","===> Finding 90 nearest neighbors using exact search using euclidean distance...\n","   --> Time elapsed: 0.04 seconds\n","===> Calculating affinity matrix...\n","   --> Time elapsed: 0.02 seconds\n","===> Calculating PCA-based initialization...\n","   --> Time elapsed: 0.02 seconds\n","===> Running optimization with exaggeration=12.00, lr=12.83 for 250 iterations...\n","Iteration   50, KL divergence -0.6858, 50 iterations in 0.3046 sec\n","Iteration  100, KL divergence 1.3874, 50 iterations in 0.0723 sec\n","Iteration  150, KL divergence 1.3874, 50 iterations in 0.0630 sec\n","Iteration  200, KL divergence 1.3874, 50 iterations in 0.0633 sec\n","Iteration  250, KL divergence 1.3874, 50 iterations in 0.0632 sec\n","   --> Time elapsed: 0.57 seconds\n","===> Running optimization with exaggeration=1.00, lr=154.00 for 500 iterations...\n","Iteration   50, KL divergence 0.1941, 50 iterations in 0.4541 sec\n","Iteration  100, KL divergence 0.1868, 50 iterations in 0.6200 sec\n","Iteration  150, KL divergence 0.1568, 50 iterations in 0.5197 sec\n","Iteration  200, KL divergence 0.1526, 50 iterations in 0.4410 sec\n","Iteration  250, KL divergence 0.1592, 50 iterations in 0.6721 sec\n","Iteration  300, KL divergence 0.1442, 50 iterations in 0.5194 sec\n","Iteration  350, KL divergence 0.1414, 50 iterations in 0.4742 sec\n","Iteration  400, KL divergence 0.1507, 50 iterations in 0.4846 sec\n","Iteration  450, KL divergence 0.1407, 50 iterations in 0.4076 sec\n","Iteration  500, KL divergence 0.1304, 50 iterations in 0.4526 sec\n","   --> Time elapsed: 5.05 seconds\n","CPU times: user 4.32 s, sys: 1.44 s, total: 5.76 s\n","Wall time: 5.72 s\n","===> Finding 15 nearest neighbors in existing embedding using exact search...\n","   --> Time elapsed: 0.01 seconds\n","===> Calculating affinity matrix...\n","   --> Time elapsed: 0.01 seconds\n","===> Running optimization with exaggeration=4.00, lr=0.10 for 0 iterations...\n","   --> Time elapsed: 0.00 seconds\n","===> Running optimization with exaggeration=1.50, lr=0.10 for 250 iterations...\n","Iteration   50, KL divergence 590.6077, 50 iterations in 0.3945 sec\n","Iteration  100, KL divergence 590.5774, 50 iterations in 0.3032 sec\n","Iteration  150, KL divergence 590.5774, 50 iterations in 0.3355 sec\n","Iteration  200, KL divergence 590.5774, 50 iterations in 0.3375 sec\n","Iteration  250, KL divergence 590.5774, 50 iterations in 0.3181 sec\n","   --> Time elapsed: 1.69 seconds\n","CPU times: user 1.18 s, sys: 61.6 ms, total: 1.24 s\n","Wall time: 1.73 s\n","\n","Dimensi setelah t-SNE:\n","x_train_tsne shape: (154, 3)\n","x_test_tsne shape: (104, 3)\n"]}],"source":["# Import libraries\n","import pandas as pd\n","import numpy as np\n","from openTSNE import TSNE\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Tampilkan dimensi awal\n","print(\"Dimensi awal:\")\n","print(f\"X_train shape: {x_train.shape}\")\n","print(f\"X_test shape: {x_test.shape}\")\n","\n","# OneHotEncoder untuk kolom 'STATE'\n","one_hot_encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n","\n","# Fit dan transformasi data training pada kolom 'STATE'\n","x_train_encoded = one_hot_encoder.fit_transform(x_train[['STATE']])\n","x_test_encoded = one_hot_encoder.transform(x_test[['STATE']])\n","\n","print(\"\\nDimensi setelah One-Hot Encoding:\")\n","print(f\"x_train_encoded shape: {x_train_encoded.shape}\")\n","print(f\"x_test_encoded shape: {x_test_encoded.shape}\")\n","\n","# Simpan hasil one-hot encoding dalam dataframe\n","x_train_encoded_df = pd.DataFrame(\n","    x_train_encoded,\n","    columns=one_hot_encoder.get_feature_names_out(['STATE'])\n",")\n","x_test_encoded_df = pd.DataFrame(\n","    x_test_encoded,\n","    columns=one_hot_encoder.get_feature_names_out(['STATE'])\n",")\n","\n","# Simpan kolom non-STATE\n","x_train_non_state = x_train.drop(columns=['STATE']).reset_index(drop=True)\n","x_test_non_state = x_test.drop(columns=['STATE']).reset_index(drop=True)\n","\n","print(\"\\nDimensi data non-STATE:\")\n","print(f\"x_train_non_state shape: {x_train_non_state.shape}\")\n","print(f\"x_test_non_state shape: {x_test_non_state.shape}\")\n","\n","\n","tsne = TSNE(perplexity=30,\n","    n_components=3,\n","    n_jobs=8,\n","    random_state=42,\n","    verbose=True)\n","\n","# Fit dan transform t-SNE\n","%time embedding_train = tsne.fit(x_train_encoded_df)\n","%time embedding_test = embedding_train.transform(x_test_encoded_df)\n","\n","print(\"\\nDimensi setelah t-SNE:\")\n","print(f\"x_train_tsne shape: {embedding_train.shape}\")\n","print(f\"x_test_tsne shape: {embedding_test.shape}\")\n","\n","# Konversi hasil t-SNE ke dataframe\n","embedding_train = pd.DataFrame(\n","    embedding_train,\n","    columns=[f'TSNE_{i+1}' for i in range(embedding_train.shape[1])]\n",")\n","embedding_test = pd.DataFrame(\n","    embedding_test,\n","    columns=[f'TSNE_{i+1}' for i in range(embedding_test.shape[1])]\n",")\n","\n","# Gabungkan hasil\n","x_train = pd.concat([x_train_non_state, embedding_train], axis=1)\n","x_test = pd.concat([x_test_non_state, embedding_test], axis=1)"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"elapsed":48,"status":"ok","timestamp":1737707227048,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"bXI03vUPysJh","outputId":"6a9e6228-248f-4b91-8e21-98c7c7244b9a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PHYSIOLOGY STATUS\n","PASS    148\n","FAIL      6\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PHYSIOLOGY STATUS</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PASS</th>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>FAIL</th>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":21}],"source":["y_train.value_counts()"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1737707227048,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"tL7hS1aCn-AN","outputId":"72f41fe7-2600-4927-d54a-a6dda4359abb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PHYSIOLOGY STATUS\n","PASS    97\n","FAIL     7\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PHYSIOLOGY STATUS</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PASS</th>\n","      <td>97</td>\n","    </tr>\n","    <tr>\n","      <th>FAIL</th>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":22}],"source":["y_test.value_counts()"]},{"cell_type":"markdown","metadata":{"id":"9xnTZcKcTXZh"},"source":["**Handle imbalanced data using resampling method**"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"elapsed":1328,"status":"ok","timestamp":1737707228336,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"QBSVXRkCSptn","outputId":"e1dbd4fb-cc08-4891-9ce8-931692036893"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PHYSIOLOGY STATUS\n","PASS    148\n","FAIL    148\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>PHYSIOLOGY STATUS</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PASS</th>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>FAIL</th>\n","      <td>148</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":23}],"source":["from imblearn.over_sampling import SMOTE\n","sm = SMOTE(random_state = 2022)\n","x_train, y_train = sm.fit_resample(x_train, y_train)\n","\n","y_train.value_counts()"]},{"cell_type":"markdown","metadata":{"id":"17VSOdO7TShC"},"source":["## **3. Modeling**"]},{"cell_type":"markdown","metadata":{"id":"fFg7VGwvTPVI"},"source":["### 3.1 Logistic Regression"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1737707228337,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"Xn86NeArSyIw","outputId":"6e904b9d-41df-44f6-e6bb-36030e4bf3b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.16      0.57      0.25         7\n","        PASS       0.96      0.78      0.86        97\n","\n","    accuracy                           0.77       104\n","   macro avg       0.56      0.68      0.56       104\n","weighted avg       0.91      0.77      0.82       104\n","\n","\n","Confusion Matrix:\n","[[ 4  3]\n"," [21 76]]\n"]}],"source":["from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.linear_model import LogisticRegression\n","\n","# Latih model\n","log_reg = LogisticRegression(C=80, penalty='l2', solver='liblinear', max_iter=100)\n","log_reg.fit(x_train, y_train)\n","\n","# Prediksi\n","y_pred = log_reg.predict(x_test)\n","\n","# Evaluasi model\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3406,"status":"ok","timestamp":1737707231735,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"nwa71HHNS66D","outputId":"6bc80716-fda5-4d29-922d-fd6af95d98de"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:348: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best hyperparameters: {'C': 20, 'penalty': 'l1', 'solver': 'liblinear'}\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.17      0.57      0.26         7\n","        PASS       0.96      0.79      0.87        97\n","\n","    accuracy                           0.78       104\n","   macro avg       0.56      0.68      0.56       104\n","weighted avg       0.91      0.78      0.83       104\n","\n","\n","Confusion Matrix:\n","[[ 4  3]\n"," [20 77]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]}],"source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report, confusion_matrix, make_scorer, recall_score\n","import numpy as np\n","\n","# Definisi model Logistic Regression\n","log_reg_tuned = LogisticRegression(random_state=2022)\n","\n","# Tentukan daftar hyperparameter yang ingin diuji\n","param_grid = {\n","    'C': [0.001, 0.01, 0.1, 1, 10, 20],\n","    'penalty': ['l1', 'l2'],\n","    'solver': ['liblinear', 'saga']\n","}\n","\n","# Inisialisasi GridSearchCV dengan model, hyperparameter grid, dan jumlah lipatan cross-validation\n","grid_search_lr = GridSearchCV(log_reg_tuned, param_grid, cv=5)\n","\n","# Latih model dengan melakukan pencarian grid\n","grid_search_lr.fit(x_train, y_train)\n","\n","# Cetak hyperparameter terbaik yang ditemukan\n","print(\"Best hyperparameters:\", grid_search_lr.best_params_)\n","\n","# Gunakan model dengan hyperparameter terbaik untuk membuat prediksi pada data testing\n","y_pred_log_tuned = grid_search_lr.best_estimator_.predict(x_test)\n","\n","# Cetak laporan klasifikasi dan matriks kebingungan\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred_log_tuned))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred_log_tuned))"]},{"cell_type":"markdown","metadata":{"id":"VBTI6bHgTFq1"},"source":["### 3.2 Decision Tree"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1737707231736,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"h8yhVnfaVCcJ","outputId":"e472a488-bd61-45ad-e969-5d499e661eb2"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        FAIL       0.13      0.86      0.23         7\n","        PASS       0.98      0.60      0.74        97\n","\n","    accuracy                           0.62       104\n","   macro avg       0.56      0.73      0.49       104\n","weighted avg       0.93      0.62      0.71       104\n","\n","[[ 6  1]\n"," [39 58]]\n"]}],"source":["from sklearn import tree\n","clf = tree.DecisionTreeClassifier(max_depth= 5, random_state= 2022)\n","clf = clf.fit(x_train, y_train)\n","\n","y_pred = clf.predict(x_test)\n","y_pred\n","\n","print(classification_report(y_test, y_pred))\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1109,"status":"ok","timestamp":1737707232837,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"B04kUnlnn4-D","outputId":"4f6fa324-9b56-4690-d744-82efa968926e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:317: UserWarning: The total space of parameters 15 is smaller than n_iter=50. Running 15 iterations. For exhaustive searches, use GridSearchCV.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best Hyperparameters: {'max_depth': 5, 'criterion': 'gini'}\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.13      0.86      0.23         7\n","        PASS       0.98      0.60      0.74        97\n","\n","    accuracy                           0.62       104\n","   macro avg       0.56      0.73      0.49       104\n","weighted avg       0.93      0.62      0.71       104\n","\n","\n","Confusion Matrix:\n","[[ 6  1]\n"," [39 58]]\n"]}],"source":["from sklearn import tree\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Inisialisasi Decision Tree Classifier\n","clf = tree.DecisionTreeClassifier(random_state=2022)\n","\n","# Tentukan grid hyperparameter yang akan di-tuning\n","param_dist = {\n","    'criterion': ['gini', 'entropy', 'log_loss'],  # Kriteria untuk pengukuran kualitas split\n","    'max_depth': [1, 2, 3, 4, 5],       # Batas kedalaman pohon\n","}\n","\n","# Inisialisasi RandomizedSearchCV\n","random_search = RandomizedSearchCV(\n","    clf,\n","    param_distributions=param_dist,\n","    n_iter=50,         # Jumlah iterasi pencarian acak\n","    cv=5,              # Cross-validation 5 fold\n","    scoring='recall_macro', # Metrik evaluasi\n","    random_state=2022\n",")\n","\n","# Latih model dengan data training menggunakan RandomizedSearchCV\n","random_search.fit(x_train, y_train)\n","\n","# Prediksi hasil menggunakan model terbaik dari hasil tuning\n","y_pred = random_search.best_estimator_.predict(x_test)\n","\n","# Cetak hasil terbaik hyperparameter yang ditemukan\n","print(\"Best Hyperparameters:\", random_search.best_params_)\n","\n","# Evaluasi performa model\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"ZjQM8uZ4TBG6"},"source":["### 3.3 Random Forest"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":763},"executionInfo":{"elapsed":1266,"status":"ok","timestamp":1737707234099,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"T6NAvTSbAy6H","outputId":"53be1448-e1c6-4b40-bdb1-f177c0917334"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        FAIL       0.14      0.86      0.24         7\n","        PASS       0.98      0.63      0.77        97\n","\n","    accuracy                           0.64       104\n","   macro avg       0.56      0.74      0.51       104\n","weighted avg       0.93      0.64      0.73       104\n","\n","[[ 6  1]\n"," [36 61]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n","\n","clf = RandomForestClassifier(max_depth=1, random_state= 2022)\n","clf = clf.fit(x_train, y_train)\n","\n","y_pred = clf.predict(x_test)\n","y_pred\n","\n","print(classification_report(y_test, y_pred))\n","print(confusion_matrix(y_test, y_pred))\n","\n","# Compute confusion matrix\n","cm = confusion_matrix(y_test, y_pred)\n","\n","# Plot confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=clf.classes_, yticklabels=clf.classes_,\n","            annot_kws={\"size\": 16})\n","plt.title('Confusion Matrix Physiology Status', fontsize=15)\n","plt.xlabel('Predicted Labels', fontsize=15)\n","plt.ylabel('True Labels', fontsize=15)\n","plt.show()"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.preprocessing import LabelEncoder\n","\n","\n","# Using LabelEncoder to convert string classes to numeric format\n","label_encoder = LabelEncoder()\n","y_train_labels = label_encoder.fit_transform(y_train)\n","y_test_labels = label_encoder.transform(y_test)\n","\n","# Get probabilities for both classes\n","y_pred_proba_fail = clf.predict_proba(x_test)[:, 0]  # Prob for FAIL (class 0)\n","y_pred_proba_pass = clf.predict_proba(x_test)[:, 1]  # Prob for PASS (class 1)\n","\n","# Calculate ROC curves for both classes\n","fpr_fail, tpr_fail, _ = roc_curve(y_test_labels, y_pred_proba_fail, pos_label=0)\n","fpr_pass, tpr_pass, _ = roc_curve(y_test_labels, y_pred_proba_pass, pos_label=1)\n","\n","# Calculate AUC scores\n","auc_fail = auc(fpr_fail, tpr_fail)\n","auc_pass = auc(fpr_pass, tpr_pass)\n","\n","# Plot both ROC curves\n","plt.figure(figsize=(10, 6))\n","\n","# Plot FAIL class ROC curve\n","plt.plot(fpr_fail, tpr_fail, color='red', label=f'FAIL (AUC = {auc_fail:.2f})')\n","\n","# Plot PASS class ROC curve\n","plt.plot(fpr_pass, tpr_pass, color='blue', label=f'PASS (AUC = {auc_pass:.2f})')\n","\n","# Plot diagonal line\n","plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n","\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc=\"lower right\")\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"Hute6CaofWKS","executionInfo":{"status":"ok","timestamp":1737707234486,"user_tz":-420,"elapsed":420,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}},"outputId":"a62543a0-8b5f-4dd4-b067-f4e20fa079f1"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":26940,"status":"ok","timestamp":1737707261410,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"pJ1oeWH7XeBB","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f7821a0f-c90a-450f-c9b5-47f870a4d7d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1107: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best hyperparameters: {'criterion': 'gini', 'max_depth': 1}\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.14      0.86      0.24         7\n","        PASS       0.98      0.63      0.77        97\n","\n","    accuracy                           0.64       104\n","   macro avg       0.56      0.74      0.51       104\n","weighted avg       0.93      0.64      0.73       104\n","\n","\n","Confusion Matrix:\n","[[ 6  1]\n"," [36 61]]\n"]}],"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report, confusion_matrix, recall_score\n","\n","# Inisialisasi Random Forest\n","rf = RandomForestClassifier(random_state=2022)\n","\n","# Tentukan grid parameter yang akan diuji\n","param_grid = {\n","    'max_depth': [1, 2, 3, 4, 5],\n","    'criterion': ['gini', 'entropy'],\n","}\n","\n","# Inisialisasi GridSearchCV\n","grid_search = GridSearchCV(\n","    estimator=rf,\n","    param_grid=param_grid,\n","    cv=5,  # 5-fold cross-validation\n","    scoring='recall',\n","    n_jobs=-1,  # gunakan semua core CPU yang tersedia\n","    verbose=2  # tingkat keluaran yang lebih detail\n",")\n","\n","# Lakukan pencarian grid\n","grid_search.fit(x_train, y_train)\n","\n","# Cetak hyperparameter terbaik\n","print(\"Best hyperparameters:\", grid_search.best_params_)\n","\n","# Gunakan model terbaik untuk prediksi\n","y_pred = grid_search.best_estimator_.predict(x_test)\n","\n","# Cetak laporan klasifikasi, matriks konfusi, dan recall\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"RAwYE3oVS4Nc"},"source":["### 3.4 Support Vector Machine (SVM)"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1737707261411,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"6OrzkVKBweR5","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2bcf494e-715a-479d-d36a-7934332a9f9f"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","        FAIL       0.13      0.71      0.22         7\n","        PASS       0.97      0.66      0.79        97\n","\n","    accuracy                           0.66       104\n","   macro avg       0.55      0.69      0.50       104\n","weighted avg       0.91      0.66      0.75       104\n","\n","[[ 5  2]\n"," [33 64]]\n"]}],"source":["from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVC\n","\n","clf = make_pipeline(StandardScaler(), SVC(C= 0.014, kernel='linear'))\n","clf.fit(x_train, y_train)\n","\n","y_pred = clf.predict(x_test)\n","\n","print(classification_report(y_test, y_pred))\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"3-4l9h0S0tDm"},"source":["### 3.5 Naive Bayes"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":797,"status":"ok","timestamp":1737707262199,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"M2TaqHhvJzVN","colab":{"base_uri":"https://localhost:8080/","height":818},"outputId":"1ec33741-5997-4675-b198-09ce54ca8e78"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","               precision    recall  f1-score   support\n","\n","        FAIL       0.14      0.86      0.24         7\n","        PASS       0.98      0.63      0.77        97\n","\n","    accuracy                           0.64       104\n","   macro avg       0.56      0.74      0.51       104\n","weighted avg       0.93      0.64      0.73       104\n","\n","Confusion Matrix:\n"," [[ 6  1]\n"," [36 61]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.naive_bayes import GaussianNB\n","\n","naive_bayes_model = GaussianNB(var_smoothing=2e-4)\n","naive_bayes_model.fit(x_train, y_train)\n","\n","y_pred = naive_bayes_model.predict(x_test)\n","\n","print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n","print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n","cm = confusion_matrix(y_test, y_pred)\n","\n","# Plot confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=naive_bayes_model.classes_, yticklabels=naive_bayes_model.classes_,\n","            annot_kws={\"size\": 20})\n","\n","# Adjust tick labels font size\n","plt.xticks(fontsize=15)\n","plt.yticks(fontsize=15)\n","\n","plt.title('Confusion Matrix Physiology Status', fontsize=20)\n","plt.xlabel('Predicted Labels', fontsize=20)\n","plt.ylabel('True Labels', fontsize=20)\n","plt.show()"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"4T_0IETDswek","executionInfo":{"status":"ok","timestamp":1737707262199,"user_tz":-420,"elapsed":5,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["import joblib\n","# Save the model to a file\n","joblib.dump(naive_bayes_model,'physiology_model.joblib')\n","\n","# Load the model from the file\n","loaded_model = joblib.load('physiology_model.joblib')"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.preprocessing import LabelEncoder\n","\n","\n","# Using LabelEncoder to convert string classes to numeric format\n","label_encoder = LabelEncoder()\n","y_train_labels = label_encoder.fit_transform(y_train)\n","y_test_labels = label_encoder.transform(y_test)\n","\n","# Get probabilities for both classes\n","y_pred_proba_fail = naive_bayes_model.predict_proba(x_test)[:, 0]  # Prob for FAIL (class 0)\n","y_pred_proba_pass = naive_bayes_model.predict_proba(x_test)[:, 1]  # Prob for PASS (class 1)\n","\n","# Calculate ROC curves for both classes\n","fpr_fail, tpr_fail, _ = roc_curve(y_test_labels, y_pred_proba_fail, pos_label=0)\n","fpr_pass, tpr_pass, _ = roc_curve(y_test_labels, y_pred_proba_pass, pos_label=1)\n","\n","# Calculate AUC scores\n","auc_fail = auc(fpr_fail, tpr_fail)\n","auc_pass = auc(fpr_pass, tpr_pass)\n","\n","# Plot both ROC curves\n","plt.figure(figsize=(10, 6))\n","\n","# Plot FAIL class ROC curve\n","plt.plot(fpr_fail, tpr_fail, color='red', label=f'FAIL (AUC = {auc_fail:.2f})')\n","\n","# Plot PASS class ROC curve\n","plt.plot(fpr_pass, tpr_pass, color='blue', label=f'PASS (AUC = {auc_pass:.2f})')\n","\n","# Plot diagonal line\n","plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n","\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve')\n","plt.legend(loc=\"lower right\")\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ffHe6hzJjUg9","executionInfo":{"status":"ok","timestamp":1737707262951,"user_tz":-420,"elapsed":755,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}},"outputId":"c7ec5ebf-c12f-41ac-ecad-be42994ff28b"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":35,"metadata":{"id":"t2It5LRDSeNq","executionInfo":{"status":"ok","timestamp":1737707262951,"user_tz":-420,"elapsed":8,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# import joblib\n","# # Komponen model yang akan disimpan\n","# model_components = {\n","#   'one_hot_encoder': one_hot_encoder,\n","#   'pca': pca,\n","#   'model': naive_bayes_model\n","# }\n","\n","# joblib.dump(model_components, 'physiology_model.pkl')\n","# print(\"Model komponen PCA dan OneHotEncoder telah disimpan.\")"]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":646,"status":"ok","timestamp":1737707263590,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"BZrrG641hWFL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"043466a0-ff18-4cb3-945c-aa7fc5714e23"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 11 candidates, totalling 55 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1107: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan]\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best Parameters: {'var_smoothing': 10.0}\n","Best Score: nan\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","        FAIL       0.09      0.71      0.16         7\n","        PASS       0.96      0.48      0.64        97\n","\n","    accuracy                           0.50       104\n","   macro avg       0.53      0.60      0.40       104\n","weighted avg       0.90      0.50      0.61       104\n","\n","\n","Confusion Matrix:\n"," [[ 5  2]\n"," [50 47]]\n"]}],"source":["from sklearn.naive_bayes import GaussianNB\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report, confusion_matrix\n","import numpy as np\n","\n","# Mendefinisikan parameter yang akan di-tune\n","param_grid = {\n","    'var_smoothing': np.logspace(1, 0, 11)\n","}\n","\n","# Membuat model base\n","nb_model = GaussianNB()\n","\n","# Membuat GridSearchCV\n","grid_search = GridSearchCV(\n","    estimator=nb_model,\n","    param_grid=param_grid,\n","    cv=5,  # 5-fold cross validation\n","    scoring='recall',\n","    n_jobs=1,  # Menggunakan semua core CPU\n","    verbose=1\n",")\n","\n","# Melakukan fitting dengan data training\n","grid_search.fit(x_train, y_train)\n","\n","# Mendapatkan parameter terbaik\n","print(\"Best Parameters:\", grid_search.best_params_)\n","print(\"Best Score:\", grid_search.best_score_)\n","\n","# Menggunakan model terbaik untuk prediksi\n","best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(x_test)\n","\n","# Menampilkan laporan klasifikasi dan matriks kebingungan\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n","print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"uw64zNqT09Qq"},"source":["### 3.7 XGBOOST"]},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"elapsed":1917,"status":"ok","timestamp":1737707265503,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"Qg8LMbdEzb6a","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4e0915d8-c057-45d2-917e-acd71bf93bb1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.14      0.71      0.23         7\n","           1       0.97      0.67      0.79        97\n","\n","    accuracy                           0.67       104\n","   macro avg       0.55      0.69      0.51       104\n","weighted avg       0.91      0.67      0.75       104\n","\n","Confusion Matrix:\n","[[ 5  2]\n"," [32 65]]\n"]}],"source":["import xgboost as xgb\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Menggunakan LabelEncoder untuk mengonversi label menjadi format numerik\n","label_encoder = LabelEncoder()\n","y_train_labels = label_encoder.fit_transform(y_train)\n","y_test_labels = label_encoder.transform(y_test)\n","\n","# Initialize XGBoost classifier\n","xgb_clf = xgb.XGBClassifier(learning_rate=0.024, max_depth=6, random_state=2022)\n","\n","# Fit the model on the training data\n","xgb_clf.fit(x_train, y_train_labels)\n","\n","# Predict on the test set\n","y_pred = xgb_clf.predict(x_test)\n","y_pred\n","\n","# Test Model\n","\n","# Evaluate the model\n","print(\"Classification Report:\")\n","print(classification_report(y_test_labels, y_pred))\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test_labels, y_pred))"]},{"cell_type":"code","source":["# Compute confusion matrix\n","cm = confusion_matrix(y_test_labels, y_pred)\n","\n","# Plot confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=xgb_clf.classes_, yticklabels=xgb_clf.classes_,\n","            annot_kws={\"size\": 16})\n","plt.title('Confusion Matrix Physiology Status', fontsize = 15)\n","plt.xlabel('Predicted Labels', fontsize = 15)\n","plt.ylabel('True Labels', fontsize = 15)\n","plt.savefig(\"cm_physiology\", dpi=300)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"CHhp5JyFFdk9","executionInfo":{"status":"ok","timestamp":1737707266809,"user_tz":-420,"elapsed":1312,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}},"outputId":"aa4c65f7-7aa8-4346-d01f-a069ecb9769a"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"1WWOx3ts1DeC"},"source":["### 3.8 K-NN"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1737707266809,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"6zkTgknOzjFP","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6e3945f5-d897-4399-ca91-1b3fdb95a2cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.10      0.71      0.18         7\n","        PASS       0.96      0.55      0.70        97\n","\n","    accuracy                           0.56       104\n","   macro avg       0.53      0.63      0.44       104\n","weighted avg       0.91      0.56      0.66       104\n","\n","Confusion Matrix:\n","[[ 5  2]\n"," [44 53]]\n"]}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Initialize KNN classifier\n","knn_clf = KNeighborsClassifier(n_neighbors=18)\n","\n","# Fit the model on the training data\n","knn_clf.fit(x_train, y_train)\n","\n","# Predict on the test set\n","y_pred = knn_clf.predict(x_test)\n","\n","# Evaluate the model\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":749,"status":"ok","timestamp":1737707267551,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"zxubv-7itnCo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9e54deca-781c-4dbb-c3ea-bc9832637a5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 6 candidates, totalling 30 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Best Hyperparameters: {'n_neighbors': 1}\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.15      0.57      0.24         7\n","        PASS       0.96      0.77      0.86        97\n","\n","    accuracy                           0.76       104\n","   macro avg       0.56      0.67      0.55       104\n","weighted avg       0.91      0.76      0.82       104\n","\n","\n","Confusion Matrix:\n","[[ 4  3]\n"," [22 75]]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:960: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 949, in _score\n","    scores = scorer(estimator, X_test, y_test, **score_params)\n","             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 288, in __call__\n","    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 380, in _score\n","    y_pred = method_caller(\n","             ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_scorer.py\", line 90, in _cached_call\n","    result, _ = _get_response_values(\n","                ^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_response.py\", line 207, in _get_response_values\n","    raise ValueError(\n","ValueError: pos_label=1 is not a valid label: It should be one of ['FAIL' 'PASS']\n","\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1107: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan]\n","  warnings.warn(\n"]}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Initialize KNN classifier\n","knn_clf = KNeighborsClassifier()\n","\n","# Tentukan grid hyperparameter yang akan di-tuning\n","param_grid = {\n","    'n_neighbors': [1, 2, 3, 16, 17, 18],               # Jumlah tetangga dari 1 hingga 30      # Skema pembobotan (uniform atau berdasarkan jarak)\n","}\n","\n","# Inisialisasi GridSearchCV\n","grid_search_knn = GridSearchCV(\n","    knn_clf,\n","    param_grid=param_grid,\n","    cv=5,                      # 5-fold cross-validation\n","    scoring='recall',     # Metrik evaluasi: recall macro\n","    verbose=1                   # Output progress\n",")\n","\n","# Latih model dengan data training menggunakan GridSearchCV\n","grid_search_knn.fit(x_train, y_train)\n","\n","# Prediksi hasil menggunakan model terbaik dari hasil tuning\n","y_pred = grid_search_knn.best_estimator_.predict(x_test)\n","\n","# Cetak hasil terbaik hyperparameter yang ditemukan\n","print(\"Best Hyperparameters:\", grid_search_knn.best_params_)\n","\n","# Evaluasi performa model\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"markdown","metadata":{"id":"tIODBlae1Nbt"},"source":["### 3.9 CATBOOST"]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":12109,"status":"ok","timestamp":1737707279655,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"NPk-YKOTznTJ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1fe05e99-d397-4b57-9faf-83d0bf913f65"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting catboost\n","  Downloading catboost-1.2.7-cp311-cp311-manylinux2014_x86_64.whl.metadata (1.2 kB)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.11/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from catboost) (3.10.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.11/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.11/dist-packages (from catboost) (2.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (from catboost) (5.24.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from catboost) (1.17.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2024.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (4.55.3)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (3.2.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly->catboost) (9.0.0)\n","Downloading catboost-1.2.7-cp311-cp311-manylinux2014_x86_64.whl (98.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: catboost\n","Successfully installed catboost-1.2.7\n"]}],"source":["!pip install catboost"]},{"cell_type":"code","execution_count":42,"metadata":{"executionInfo":{"elapsed":2684,"status":"ok","timestamp":1737707282325,"user":{"displayName":"polaris ai","userId":"13768565794035999878"},"user_tz":-420},"id":"ICksSVggzpZh","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef57db22-89fe-4171-d0b3-2691c3a82b64"},"outputs":[{"output_type":"stream","name":"stdout","text":["0:\tlearn: 0.5801272\ttotal: 48.4ms\tremaining: 48.4s\n","1:\tlearn: 0.6562457\ttotal: 50.1ms\tremaining: 25s\n","2:\tlearn: 0.8338184\ttotal: 51.4ms\tremaining: 17.1s\n"]},{"output_type":"stream","name":"stderr","text":["learning rate is greater than 1. You probably need to decrease learning rate.\n","learning rate is greater than 1. You probably need to decrease learning rate.\n","learning rate is greater than 1. You probably need to decrease learning rate.\n","learning rate is greater than 1. You probably need to decrease learning rate.\n"]},{"output_type":"stream","name":"stdout","text":["3:\tlearn: 0.9051295\ttotal: 53.2ms\tremaining: 13.3s\n","4:\tlearn: 0.7703164\ttotal: 56ms\tremaining: 11.1s\n","5:\tlearn: 0.2690068\ttotal: 57.3ms\tremaining: 9.5s\n","6:\tlearn: 0.1785086\ttotal: 58.8ms\tremaining: 8.34s\n","7:\tlearn: 0.0468892\ttotal: 60.3ms\tremaining: 7.48s\n","8:\tlearn: 0.1200994\ttotal: 61.8ms\tremaining: 6.8s\n","9:\tlearn: 0.0165690\ttotal: 63.2ms\tremaining: 6.26s\n","10:\tlearn: 0.0011609\ttotal: 64.7ms\tremaining: 5.82s\n","11:\tlearn: 0.0011413\ttotal: 66.8ms\tremaining: 5.5s\n","12:\tlearn: 0.0011385\ttotal: 68.9ms\tremaining: 5.23s\n","13:\tlearn: 0.0010591\ttotal: 73.6ms\tremaining: 5.18s\n","14:\tlearn: 0.0009646\ttotal: 77.7ms\tremaining: 5.1s\n","15:\tlearn: 0.0009304\ttotal: 79.6ms\tremaining: 4.9s\n","16:\tlearn: 0.0009304\ttotal: 83.5ms\tremaining: 4.83s\n","17:\tlearn: 0.0008077\ttotal: 86.3ms\tremaining: 4.71s\n","18:\tlearn: 0.0007578\ttotal: 88.8ms\tremaining: 4.59s\n","19:\tlearn: 0.0007354\ttotal: 90.2ms\tremaining: 4.42s\n","20:\tlearn: 0.0007342\ttotal: 91.7ms\tremaining: 4.28s\n","21:\tlearn: 0.0007338\ttotal: 93.2ms\tremaining: 4.14s\n","22:\tlearn: 0.0007335\ttotal: 94.8ms\tremaining: 4.03s\n","23:\tlearn: 0.0007176\ttotal: 96.2ms\tremaining: 3.91s\n","24:\tlearn: 0.0007167\ttotal: 97.7ms\tremaining: 3.81s\n","25:\tlearn: 0.0006352\ttotal: 99.2ms\tremaining: 3.72s\n","26:\tlearn: 0.0006351\ttotal: 101ms\tremaining: 3.63s\n","27:\tlearn: 0.0006350\ttotal: 102ms\tremaining: 3.54s\n","28:\tlearn: 0.0006349\ttotal: 104ms\tremaining: 3.47s\n","29:\tlearn: 0.0006346\ttotal: 105ms\tremaining: 3.39s\n","30:\tlearn: 0.0006344\ttotal: 106ms\tremaining: 3.33s\n","31:\tlearn: 0.0006340\ttotal: 108ms\tremaining: 3.26s\n","32:\tlearn: 0.0006331\ttotal: 109ms\tremaining: 3.21s\n","33:\tlearn: 0.0006296\ttotal: 111ms\tremaining: 3.15s\n","34:\tlearn: 0.0006294\ttotal: 112ms\tremaining: 3.1s\n","35:\tlearn: 0.0006291\ttotal: 114ms\tremaining: 3.05s\n","36:\tlearn: 0.0006285\ttotal: 115ms\tremaining: 3s\n","37:\tlearn: 0.0006283\ttotal: 117ms\tremaining: 2.96s\n","38:\tlearn: 0.0006283\ttotal: 118ms\tremaining: 2.91s\n","39:\tlearn: 0.0006277\ttotal: 120ms\tremaining: 2.87s\n","40:\tlearn: 0.0006266\ttotal: 121ms\tremaining: 2.83s\n","41:\tlearn: 0.0006261\ttotal: 123ms\tremaining: 2.79s\n","42:\tlearn: 0.0006254\ttotal: 124ms\tremaining: 2.76s\n","43:\tlearn: 0.0006184\ttotal: 125ms\tremaining: 2.72s\n","44:\tlearn: 0.0006181\ttotal: 127ms\tremaining: 2.69s\n","45:\tlearn: 0.0006159\ttotal: 128ms\tremaining: 2.66s\n","46:\tlearn: 0.0006157\ttotal: 130ms\tremaining: 2.63s\n","47:\tlearn: 0.0006147\ttotal: 131ms\tremaining: 2.6s\n","48:\tlearn: 0.0006085\ttotal: 133ms\tremaining: 2.58s\n","49:\tlearn: 0.0006071\ttotal: 134ms\tremaining: 2.55s\n","50:\tlearn: 0.0006069\ttotal: 136ms\tremaining: 2.52s\n","51:\tlearn: 0.0006059\ttotal: 137ms\tremaining: 2.5s\n","52:\tlearn: 0.0006053\ttotal: 139ms\tremaining: 2.48s\n","53:\tlearn: 0.0006045\ttotal: 140ms\tremaining: 2.45s\n","54:\tlearn: 0.0006044\ttotal: 141ms\tremaining: 2.43s\n","55:\tlearn: 0.0006041\ttotal: 143ms\tremaining: 2.41s\n","56:\tlearn: 0.0006043\ttotal: 145ms\tremaining: 2.39s\n","57:\tlearn: 0.0006039\ttotal: 146ms\tremaining: 2.37s\n","58:\tlearn: 0.0006032\ttotal: 148ms\tremaining: 2.35s\n","59:\tlearn: 0.0006031\ttotal: 149ms\tremaining: 2.33s\n","60:\tlearn: 0.0006027\ttotal: 150ms\tremaining: 2.31s\n","61:\tlearn: 0.0006009\ttotal: 152ms\tremaining: 2.3s\n","62:\tlearn: 0.0006009\ttotal: 153ms\tremaining: 2.28s\n","63:\tlearn: 0.0006001\ttotal: 155ms\tremaining: 2.26s\n","64:\tlearn: 0.0006000\ttotal: 156ms\tremaining: 2.25s\n","65:\tlearn: 0.0005996\ttotal: 158ms\tremaining: 2.23s\n","66:\tlearn: 0.0005994\ttotal: 159ms\tremaining: 2.21s\n","67:\tlearn: 0.0005994\ttotal: 161ms\tremaining: 2.2s\n","68:\tlearn: 0.0005987\ttotal: 162ms\tremaining: 2.18s\n","69:\tlearn: 0.0005984\ttotal: 163ms\tremaining: 2.17s\n","70:\tlearn: 0.0005983\ttotal: 165ms\tremaining: 2.16s\n","71:\tlearn: 0.0005968\ttotal: 166ms\tremaining: 2.14s\n","72:\tlearn: 0.0005957\ttotal: 168ms\tremaining: 2.13s\n","73:\tlearn: 0.0005951\ttotal: 169ms\tremaining: 2.12s\n","74:\tlearn: 0.0005952\ttotal: 171ms\tremaining: 2.1s\n","75:\tlearn: 0.0005948\ttotal: 172ms\tremaining: 2.09s\n","76:\tlearn: 0.0005947\ttotal: 174ms\tremaining: 2.08s\n","77:\tlearn: 0.0005946\ttotal: 175ms\tremaining: 2.07s\n","78:\tlearn: 0.0005940\ttotal: 176ms\tremaining: 2.06s\n","79:\tlearn: 0.0005898\ttotal: 178ms\tremaining: 2.04s\n","80:\tlearn: 0.0005874\ttotal: 179ms\tremaining: 2.03s\n","81:\tlearn: 0.0005872\ttotal: 181ms\tremaining: 2.02s\n","82:\tlearn: 0.0005863\ttotal: 183ms\tremaining: 2.02s\n","83:\tlearn: 0.0005860\ttotal: 185ms\tremaining: 2.02s\n","84:\tlearn: 0.0005860\ttotal: 187ms\tremaining: 2.01s\n","85:\tlearn: 0.0005847\ttotal: 188ms\tremaining: 2s\n","86:\tlearn: 0.0005845\ttotal: 190ms\tremaining: 1.99s\n","87:\tlearn: 0.0005824\ttotal: 191ms\tremaining: 1.98s\n","88:\tlearn: 0.0005822\ttotal: 193ms\tremaining: 1.97s\n","89:\tlearn: 0.0005803\ttotal: 194ms\tremaining: 1.96s\n","90:\tlearn: 0.0005798\ttotal: 196ms\tremaining: 1.96s\n","91:\tlearn: 0.0005789\ttotal: 197ms\tremaining: 1.95s\n","92:\tlearn: 0.0005786\ttotal: 199ms\tremaining: 1.94s\n","93:\tlearn: 0.0005787\ttotal: 200ms\tremaining: 1.93s\n","94:\tlearn: 0.0005761\ttotal: 202ms\tremaining: 1.92s\n","95:\tlearn: 0.0005761\ttotal: 203ms\tremaining: 1.91s\n","96:\tlearn: 0.0005757\ttotal: 205ms\tremaining: 1.91s\n","97:\tlearn: 0.0005748\ttotal: 206ms\tremaining: 1.9s\n","98:\tlearn: 0.0005733\ttotal: 208ms\tremaining: 1.89s\n","99:\tlearn: 0.0005712\ttotal: 209ms\tremaining: 1.88s\n","100:\tlearn: 0.0005692\ttotal: 210ms\tremaining: 1.87s\n","101:\tlearn: 0.0005676\ttotal: 212ms\tremaining: 1.86s\n","102:\tlearn: 0.0005658\ttotal: 213ms\tremaining: 1.86s\n","103:\tlearn: 0.0005654\ttotal: 215ms\tremaining: 1.85s\n","104:\tlearn: 0.0005630\ttotal: 216ms\tremaining: 1.84s\n","105:\tlearn: 0.0005619\ttotal: 218ms\tremaining: 1.84s\n","106:\tlearn: 0.0005602\ttotal: 219ms\tremaining: 1.83s\n","107:\tlearn: 0.0005592\ttotal: 221ms\tremaining: 1.82s\n","108:\tlearn: 0.0005580\ttotal: 222ms\tremaining: 1.82s\n","109:\tlearn: 0.0005579\ttotal: 224ms\tremaining: 1.81s\n","110:\tlearn: 0.0005550\ttotal: 225ms\tremaining: 1.8s\n","111:\tlearn: 0.0005544\ttotal: 227ms\tremaining: 1.8s\n","112:\tlearn: 0.0005538\ttotal: 228ms\tremaining: 1.79s\n","113:\tlearn: 0.0005538\ttotal: 230ms\tremaining: 1.78s\n","114:\tlearn: 0.0005528\ttotal: 231ms\tremaining: 1.78s\n","115:\tlearn: 0.0005475\ttotal: 235ms\tremaining: 1.79s\n","116:\tlearn: 0.0005471\ttotal: 237ms\tremaining: 1.79s\n","117:\tlearn: 0.0005472\ttotal: 240ms\tremaining: 1.79s\n","118:\tlearn: 0.0005453\ttotal: 241ms\tremaining: 1.78s\n","119:\tlearn: 0.0005451\ttotal: 244ms\tremaining: 1.79s\n","120:\tlearn: 0.0005437\ttotal: 246ms\tremaining: 1.79s\n","121:\tlearn: 0.0005436\ttotal: 247ms\tremaining: 1.78s\n","122:\tlearn: 0.0005132\ttotal: 249ms\tremaining: 1.77s\n","123:\tlearn: 0.0005129\ttotal: 251ms\tremaining: 1.77s\n","124:\tlearn: 0.0005128\ttotal: 252ms\tremaining: 1.76s\n","125:\tlearn: 0.0005126\ttotal: 254ms\tremaining: 1.76s\n","126:\tlearn: 0.0005081\ttotal: 255ms\tremaining: 1.75s\n","127:\tlearn: 0.0005077\ttotal: 257ms\tremaining: 1.75s\n","128:\tlearn: 0.0005076\ttotal: 258ms\tremaining: 1.74s\n","129:\tlearn: 0.0005077\ttotal: 260ms\tremaining: 1.74s\n","130:\tlearn: 0.0005077\ttotal: 261ms\tremaining: 1.73s\n","131:\tlearn: 0.0005075\ttotal: 263ms\tremaining: 1.73s\n","132:\tlearn: 0.0005073\ttotal: 264ms\tremaining: 1.72s\n","133:\tlearn: 0.0005074\ttotal: 266ms\tremaining: 1.72s\n","134:\tlearn: 0.0005069\ttotal: 267ms\tremaining: 1.71s\n","135:\tlearn: 0.0005070\ttotal: 269ms\tremaining: 1.71s\n","136:\tlearn: 0.0005064\ttotal: 270ms\tremaining: 1.7s\n","137:\tlearn: 0.0005060\ttotal: 272ms\tremaining: 1.7s\n","138:\tlearn: 0.0005060\ttotal: 273ms\tremaining: 1.69s\n","139:\tlearn: 0.0005058\ttotal: 275ms\tremaining: 1.69s\n","140:\tlearn: 0.0005057\ttotal: 277ms\tremaining: 1.68s\n","141:\tlearn: 0.0005039\ttotal: 278ms\tremaining: 1.68s\n","142:\tlearn: 0.0005038\ttotal: 281ms\tremaining: 1.68s\n","143:\tlearn: 0.0005032\ttotal: 282ms\tremaining: 1.68s\n","144:\tlearn: 0.0005032\ttotal: 284ms\tremaining: 1.67s\n","145:\tlearn: 0.0005032\ttotal: 285ms\tremaining: 1.67s\n","146:\tlearn: 0.0005029\ttotal: 286ms\tremaining: 1.66s\n","147:\tlearn: 0.0005029\ttotal: 288ms\tremaining: 1.66s\n","148:\tlearn: 0.0005025\ttotal: 289ms\tremaining: 1.65s\n","149:\tlearn: 0.0005022\ttotal: 291ms\tremaining: 1.65s\n","150:\tlearn: 0.0005021\ttotal: 292ms\tremaining: 1.64s\n","151:\tlearn: 0.0005016\ttotal: 294ms\tremaining: 1.64s\n","152:\tlearn: 0.0005014\ttotal: 295ms\tremaining: 1.64s\n","153:\tlearn: 0.0005008\ttotal: 297ms\tremaining: 1.63s\n","154:\tlearn: 0.0005002\ttotal: 298ms\tremaining: 1.63s\n","155:\tlearn: 0.0005002\ttotal: 300ms\tremaining: 1.62s\n","156:\tlearn: 0.0004986\ttotal: 301ms\tremaining: 1.62s\n","157:\tlearn: 0.0004986\ttotal: 303ms\tremaining: 1.61s\n","158:\tlearn: 0.0004984\ttotal: 304ms\tremaining: 1.61s\n","159:\tlearn: 0.0004980\ttotal: 306ms\tremaining: 1.6s\n","160:\tlearn: 0.0004975\ttotal: 307ms\tremaining: 1.6s\n","161:\tlearn: 0.0004973\ttotal: 309ms\tremaining: 1.6s\n","162:\tlearn: 0.0004972\ttotal: 310ms\tremaining: 1.59s\n","163:\tlearn: 0.0004970\ttotal: 312ms\tremaining: 1.59s\n","164:\tlearn: 0.0004961\ttotal: 314ms\tremaining: 1.59s\n","165:\tlearn: 0.0004955\ttotal: 315ms\tremaining: 1.58s\n","166:\tlearn: 0.0004954\ttotal: 316ms\tremaining: 1.58s\n","167:\tlearn: 0.0004951\ttotal: 318ms\tremaining: 1.58s\n","168:\tlearn: 0.0004894\ttotal: 320ms\tremaining: 1.57s\n","169:\tlearn: 0.0004894\ttotal: 322ms\tremaining: 1.57s\n","170:\tlearn: 0.0004893\ttotal: 323ms\tremaining: 1.57s\n","171:\tlearn: 0.0004867\ttotal: 325ms\tremaining: 1.56s\n","172:\tlearn: 0.0004864\ttotal: 326ms\tremaining: 1.56s\n","173:\tlearn: 0.0004861\ttotal: 328ms\tremaining: 1.55s\n","174:\tlearn: 0.0004861\ttotal: 329ms\tremaining: 1.55s\n","175:\tlearn: 0.0004860\ttotal: 331ms\tremaining: 1.55s\n","176:\tlearn: 0.0004849\ttotal: 333ms\tremaining: 1.55s\n","177:\tlearn: 0.0004689\ttotal: 335ms\tremaining: 1.54s\n","178:\tlearn: 0.0004685\ttotal: 336ms\tremaining: 1.54s\n","179:\tlearn: 0.0004684\ttotal: 338ms\tremaining: 1.54s\n","180:\tlearn: 0.0004680\ttotal: 340ms\tremaining: 1.54s\n","181:\tlearn: 0.0004661\ttotal: 342ms\tremaining: 1.54s\n","182:\tlearn: 0.0004656\ttotal: 343ms\tremaining: 1.53s\n","183:\tlearn: 0.0004647\ttotal: 345ms\tremaining: 1.53s\n","184:\tlearn: 0.0004605\ttotal: 346ms\tremaining: 1.52s\n","185:\tlearn: 0.0004603\ttotal: 348ms\tremaining: 1.52s\n","186:\tlearn: 0.0004602\ttotal: 350ms\tremaining: 1.52s\n","187:\tlearn: 0.0004595\ttotal: 351ms\tremaining: 1.52s\n","188:\tlearn: 0.0004594\ttotal: 353ms\tremaining: 1.51s\n","189:\tlearn: 0.0004585\ttotal: 354ms\tremaining: 1.51s\n","190:\tlearn: 0.0004579\ttotal: 356ms\tremaining: 1.5s\n","191:\tlearn: 0.0004573\ttotal: 357ms\tremaining: 1.5s\n","192:\tlearn: 0.0004570\ttotal: 358ms\tremaining: 1.5s\n","193:\tlearn: 0.0004566\ttotal: 360ms\tremaining: 1.5s\n","194:\tlearn: 0.0004554\ttotal: 361ms\tremaining: 1.49s\n","195:\tlearn: 0.0004547\ttotal: 363ms\tremaining: 1.49s\n","196:\tlearn: 0.0004542\ttotal: 364ms\tremaining: 1.48s\n","197:\tlearn: 0.0004542\ttotal: 366ms\tremaining: 1.48s\n","198:\tlearn: 0.0004542\ttotal: 367ms\tremaining: 1.48s\n","199:\tlearn: 0.0004537\ttotal: 369ms\tremaining: 1.47s\n","200:\tlearn: 0.0004535\ttotal: 370ms\tremaining: 1.47s\n","201:\tlearn: 0.0004531\ttotal: 372ms\tremaining: 1.47s\n","202:\tlearn: 0.0004522\ttotal: 373ms\tremaining: 1.47s\n","203:\tlearn: 0.0004519\ttotal: 375ms\tremaining: 1.46s\n","204:\tlearn: 0.0004518\ttotal: 376ms\tremaining: 1.46s\n","205:\tlearn: 0.0004514\ttotal: 378ms\tremaining: 1.46s\n","206:\tlearn: 0.0004501\ttotal: 379ms\tremaining: 1.45s\n","207:\tlearn: 0.0004502\ttotal: 381ms\tremaining: 1.45s\n","208:\tlearn: 0.0004499\ttotal: 382ms\tremaining: 1.45s\n","209:\tlearn: 0.0004498\ttotal: 383ms\tremaining: 1.44s\n","210:\tlearn: 0.0004491\ttotal: 385ms\tremaining: 1.44s\n","211:\tlearn: 0.0004484\ttotal: 386ms\tremaining: 1.44s\n","212:\tlearn: 0.0004479\ttotal: 388ms\tremaining: 1.43s\n","213:\tlearn: 0.0004470\ttotal: 389ms\tremaining: 1.43s\n","214:\tlearn: 0.0004465\ttotal: 391ms\tremaining: 1.43s\n","215:\tlearn: 0.0004455\ttotal: 392ms\tremaining: 1.42s\n","216:\tlearn: 0.0004446\ttotal: 394ms\tremaining: 1.42s\n","217:\tlearn: 0.0004445\ttotal: 396ms\tremaining: 1.42s\n","218:\tlearn: 0.0004443\ttotal: 397ms\tremaining: 1.42s\n","219:\tlearn: 0.0004427\ttotal: 399ms\tremaining: 1.41s\n","220:\tlearn: 0.0004413\ttotal: 400ms\tremaining: 1.41s\n","221:\tlearn: 0.0004415\ttotal: 402ms\tremaining: 1.41s\n","222:\tlearn: 0.0004407\ttotal: 403ms\tremaining: 1.4s\n","223:\tlearn: 0.0004406\ttotal: 404ms\tremaining: 1.4s\n","224:\tlearn: 0.0004389\ttotal: 406ms\tremaining: 1.4s\n","225:\tlearn: 0.0004385\ttotal: 407ms\tremaining: 1.4s\n","226:\tlearn: 0.0004384\ttotal: 409ms\tremaining: 1.39s\n","227:\tlearn: 0.0004379\ttotal: 410ms\tremaining: 1.39s\n","228:\tlearn: 0.0004376\ttotal: 412ms\tremaining: 1.39s\n","229:\tlearn: 0.0004374\ttotal: 413ms\tremaining: 1.38s\n","230:\tlearn: 0.0004372\ttotal: 415ms\tremaining: 1.38s\n","231:\tlearn: 0.0004367\ttotal: 416ms\tremaining: 1.38s\n","232:\tlearn: 0.0004363\ttotal: 418ms\tremaining: 1.38s\n","233:\tlearn: 0.0004361\ttotal: 419ms\tremaining: 1.37s\n","234:\tlearn: 0.0004350\ttotal: 421ms\tremaining: 1.37s\n","235:\tlearn: 0.0004347\ttotal: 422ms\tremaining: 1.37s\n","236:\tlearn: 0.0004347\ttotal: 425ms\tremaining: 1.37s\n","237:\tlearn: 0.0004342\ttotal: 427ms\tremaining: 1.37s\n","238:\tlearn: 0.0004339\ttotal: 430ms\tremaining: 1.37s\n","239:\tlearn: 0.0004338\ttotal: 432ms\tremaining: 1.37s\n","240:\tlearn: 0.0004337\ttotal: 433ms\tremaining: 1.36s\n","241:\tlearn: 0.0004334\ttotal: 435ms\tremaining: 1.36s\n","242:\tlearn: 0.0004334\ttotal: 437ms\tremaining: 1.36s\n","243:\tlearn: 0.0004334\ttotal: 438ms\tremaining: 1.36s\n","244:\tlearn: 0.0004333\ttotal: 440ms\tremaining: 1.36s\n","245:\tlearn: 0.0004328\ttotal: 442ms\tremaining: 1.35s\n","246:\tlearn: 0.0004327\ttotal: 445ms\tremaining: 1.35s\n","247:\tlearn: 0.0004326\ttotal: 447ms\tremaining: 1.36s\n","248:\tlearn: 0.0004325\ttotal: 449ms\tremaining: 1.35s\n","249:\tlearn: 0.0004324\ttotal: 450ms\tremaining: 1.35s\n","250:\tlearn: 0.0004321\ttotal: 456ms\tremaining: 1.36s\n","251:\tlearn: 0.0004319\ttotal: 466ms\tremaining: 1.38s\n","252:\tlearn: 0.0004317\ttotal: 470ms\tremaining: 1.39s\n","253:\tlearn: 0.0004314\ttotal: 479ms\tremaining: 1.41s\n","254:\tlearn: 0.0004312\ttotal: 488ms\tremaining: 1.43s\n","255:\tlearn: 0.0004308\ttotal: 491ms\tremaining: 1.43s\n","256:\tlearn: 0.0004303\ttotal: 499ms\tremaining: 1.44s\n","257:\tlearn: 0.0004291\ttotal: 502ms\tremaining: 1.44s\n","258:\tlearn: 0.0004288\ttotal: 505ms\tremaining: 1.45s\n","259:\tlearn: 0.0004289\ttotal: 513ms\tremaining: 1.46s\n","260:\tlearn: 0.0004279\ttotal: 517ms\tremaining: 1.46s\n","261:\tlearn: 0.0004262\ttotal: 522ms\tremaining: 1.47s\n","262:\tlearn: 0.0004255\ttotal: 524ms\tremaining: 1.47s\n","263:\tlearn: 0.0004255\ttotal: 528ms\tremaining: 1.47s\n","264:\tlearn: 0.0004253\ttotal: 535ms\tremaining: 1.48s\n","265:\tlearn: 0.0004243\ttotal: 537ms\tremaining: 1.48s\n","266:\tlearn: 0.0004242\ttotal: 541ms\tremaining: 1.48s\n","267:\tlearn: 0.0004224\ttotal: 549ms\tremaining: 1.5s\n","268:\tlearn: 0.0004220\ttotal: 554ms\tremaining: 1.5s\n","269:\tlearn: 0.0004216\ttotal: 558ms\tremaining: 1.51s\n","270:\tlearn: 0.0004210\ttotal: 561ms\tremaining: 1.51s\n","271:\tlearn: 0.0004210\ttotal: 568ms\tremaining: 1.52s\n","272:\tlearn: 0.0004209\ttotal: 572ms\tremaining: 1.52s\n","273:\tlearn: 0.0004208\ttotal: 575ms\tremaining: 1.52s\n","274:\tlearn: 0.0004206\ttotal: 579ms\tremaining: 1.53s\n","275:\tlearn: 0.0004203\ttotal: 585ms\tremaining: 1.53s\n","276:\tlearn: 0.0004198\ttotal: 589ms\tremaining: 1.54s\n","277:\tlearn: 0.0004197\ttotal: 595ms\tremaining: 1.54s\n","278:\tlearn: 0.0004193\ttotal: 601ms\tremaining: 1.55s\n","279:\tlearn: 0.0004176\ttotal: 603ms\tremaining: 1.55s\n","280:\tlearn: 0.0004165\ttotal: 608ms\tremaining: 1.55s\n","281:\tlearn: 0.0004151\ttotal: 612ms\tremaining: 1.56s\n","282:\tlearn: 0.0004149\ttotal: 617ms\tremaining: 1.56s\n","283:\tlearn: 0.0004149\ttotal: 623ms\tremaining: 1.57s\n","284:\tlearn: 0.0004147\ttotal: 627ms\tremaining: 1.57s\n","285:\tlearn: 0.0004145\ttotal: 631ms\tremaining: 1.57s\n","286:\tlearn: 0.0004143\ttotal: 635ms\tremaining: 1.58s\n","287:\tlearn: 0.0004142\ttotal: 638ms\tremaining: 1.58s\n","288:\tlearn: 0.0004139\ttotal: 642ms\tremaining: 1.58s\n","289:\tlearn: 0.0004138\ttotal: 645ms\tremaining: 1.58s\n","290:\tlearn: 0.0004133\ttotal: 649ms\tremaining: 1.58s\n","291:\tlearn: 0.0004110\ttotal: 655ms\tremaining: 1.59s\n","292:\tlearn: 0.0004107\ttotal: 658ms\tremaining: 1.59s\n","293:\tlearn: 0.0004107\ttotal: 666ms\tremaining: 1.6s\n","294:\tlearn: 0.0004103\ttotal: 670ms\tremaining: 1.6s\n","295:\tlearn: 0.0004103\ttotal: 673ms\tremaining: 1.6s\n","296:\tlearn: 0.0004103\ttotal: 676ms\tremaining: 1.6s\n","297:\tlearn: 0.0004100\ttotal: 680ms\tremaining: 1.6s\n","298:\tlearn: 0.0004028\ttotal: 684ms\tremaining: 1.6s\n","299:\tlearn: 0.0004027\ttotal: 691ms\tremaining: 1.61s\n","300:\tlearn: 0.0004024\ttotal: 694ms\tremaining: 1.61s\n","301:\tlearn: 0.0004023\ttotal: 697ms\tremaining: 1.61s\n","302:\tlearn: 0.0004020\ttotal: 701ms\tremaining: 1.61s\n","303:\tlearn: 0.0004014\ttotal: 705ms\tremaining: 1.61s\n","304:\tlearn: 0.0004007\ttotal: 708ms\tremaining: 1.61s\n","305:\tlearn: 0.0003997\ttotal: 712ms\tremaining: 1.61s\n","306:\tlearn: 0.0003993\ttotal: 715ms\tremaining: 1.61s\n","307:\tlearn: 0.0003993\ttotal: 723ms\tremaining: 1.63s\n","308:\tlearn: 0.0003986\ttotal: 726ms\tremaining: 1.62s\n","309:\tlearn: 0.0003983\ttotal: 731ms\tremaining: 1.63s\n","310:\tlearn: 0.0003978\ttotal: 734ms\tremaining: 1.63s\n","311:\tlearn: 0.0003961\ttotal: 742ms\tremaining: 1.64s\n","312:\tlearn: 0.0003955\ttotal: 745ms\tremaining: 1.64s\n","313:\tlearn: 0.0003955\ttotal: 747ms\tremaining: 1.63s\n","314:\tlearn: 0.0003947\ttotal: 752ms\tremaining: 1.64s\n","315:\tlearn: 0.0003945\ttotal: 755ms\tremaining: 1.64s\n","316:\tlearn: 0.0003943\ttotal: 763ms\tremaining: 1.64s\n","317:\tlearn: 0.0003943\ttotal: 766ms\tremaining: 1.64s\n","318:\tlearn: 0.0003943\ttotal: 773ms\tremaining: 1.65s\n","319:\tlearn: 0.0003943\ttotal: 776ms\tremaining: 1.65s\n","320:\tlearn: 0.0003943\ttotal: 782ms\tremaining: 1.65s\n","321:\tlearn: 0.0003943\ttotal: 785ms\tremaining: 1.65s\n","322:\tlearn: 0.0003943\ttotal: 788ms\tremaining: 1.65s\n","323:\tlearn: 0.0003943\ttotal: 790ms\tremaining: 1.65s\n","324:\tlearn: 0.0003943\ttotal: 793ms\tremaining: 1.65s\n","325:\tlearn: 0.0003943\ttotal: 796ms\tremaining: 1.64s\n","326:\tlearn: 0.0003943\ttotal: 798ms\tremaining: 1.64s\n","327:\tlearn: 0.0003943\ttotal: 801ms\tremaining: 1.64s\n","328:\tlearn: 0.0003943\ttotal: 805ms\tremaining: 1.64s\n","329:\tlearn: 0.0003943\ttotal: 808ms\tremaining: 1.64s\n","330:\tlearn: 0.0003943\ttotal: 811ms\tremaining: 1.64s\n","331:\tlearn: 0.0003943\ttotal: 814ms\tremaining: 1.64s\n","332:\tlearn: 0.0003943\ttotal: 817ms\tremaining: 1.64s\n","333:\tlearn: 0.0003943\ttotal: 821ms\tremaining: 1.64s\n","334:\tlearn: 0.0003943\ttotal: 823ms\tremaining: 1.63s\n","335:\tlearn: 0.0003943\ttotal: 827ms\tremaining: 1.63s\n","336:\tlearn: 0.0003943\ttotal: 830ms\tremaining: 1.63s\n","337:\tlearn: 0.0003943\ttotal: 833ms\tremaining: 1.63s\n","338:\tlearn: 0.0003943\ttotal: 837ms\tremaining: 1.63s\n","339:\tlearn: 0.0003943\ttotal: 840ms\tremaining: 1.63s\n","340:\tlearn: 0.0003943\ttotal: 843ms\tremaining: 1.63s\n","341:\tlearn: 0.0003943\ttotal: 847ms\tremaining: 1.63s\n","342:\tlearn: 0.0003943\ttotal: 850ms\tremaining: 1.63s\n","343:\tlearn: 0.0003943\ttotal: 853ms\tremaining: 1.63s\n","344:\tlearn: 0.0003943\ttotal: 857ms\tremaining: 1.63s\n","345:\tlearn: 0.0003943\ttotal: 858ms\tremaining: 1.62s\n","346:\tlearn: 0.0003943\ttotal: 860ms\tremaining: 1.62s\n","347:\tlearn: 0.0003943\ttotal: 861ms\tremaining: 1.61s\n","348:\tlearn: 0.0003943\ttotal: 863ms\tremaining: 1.61s\n","349:\tlearn: 0.0003943\ttotal: 865ms\tremaining: 1.61s\n","350:\tlearn: 0.0003943\ttotal: 866ms\tremaining: 1.6s\n","351:\tlearn: 0.0003943\ttotal: 868ms\tremaining: 1.6s\n","352:\tlearn: 0.0003943\ttotal: 870ms\tremaining: 1.59s\n","353:\tlearn: 0.0003943\ttotal: 872ms\tremaining: 1.59s\n","354:\tlearn: 0.0003943\ttotal: 873ms\tremaining: 1.59s\n","355:\tlearn: 0.0003943\ttotal: 875ms\tremaining: 1.58s\n","356:\tlearn: 0.0003943\ttotal: 877ms\tremaining: 1.58s\n","357:\tlearn: 0.0003943\ttotal: 878ms\tremaining: 1.57s\n","358:\tlearn: 0.0003943\ttotal: 880ms\tremaining: 1.57s\n","359:\tlearn: 0.0003943\ttotal: 882ms\tremaining: 1.57s\n","360:\tlearn: 0.0003943\ttotal: 884ms\tremaining: 1.56s\n","361:\tlearn: 0.0003943\ttotal: 885ms\tremaining: 1.56s\n","362:\tlearn: 0.0003943\ttotal: 887ms\tremaining: 1.56s\n","363:\tlearn: 0.0003943\ttotal: 889ms\tremaining: 1.55s\n","364:\tlearn: 0.0003943\ttotal: 890ms\tremaining: 1.55s\n","365:\tlearn: 0.0003943\ttotal: 892ms\tremaining: 1.54s\n","366:\tlearn: 0.0003943\ttotal: 894ms\tremaining: 1.54s\n","367:\tlearn: 0.0003943\ttotal: 896ms\tremaining: 1.54s\n","368:\tlearn: 0.0003943\ttotal: 897ms\tremaining: 1.53s\n","369:\tlearn: 0.0003943\ttotal: 899ms\tremaining: 1.53s\n","370:\tlearn: 0.0003943\ttotal: 901ms\tremaining: 1.53s\n","371:\tlearn: 0.0003943\ttotal: 902ms\tremaining: 1.52s\n","372:\tlearn: 0.0003943\ttotal: 904ms\tremaining: 1.52s\n","373:\tlearn: 0.0003943\ttotal: 905ms\tremaining: 1.51s\n","374:\tlearn: 0.0003943\ttotal: 907ms\tremaining: 1.51s\n","375:\tlearn: 0.0003943\ttotal: 908ms\tremaining: 1.51s\n","376:\tlearn: 0.0003943\ttotal: 910ms\tremaining: 1.5s\n","377:\tlearn: 0.0003943\ttotal: 911ms\tremaining: 1.5s\n","378:\tlearn: 0.0003943\ttotal: 914ms\tremaining: 1.5s\n","379:\tlearn: 0.0003943\ttotal: 916ms\tremaining: 1.5s\n","380:\tlearn: 0.0003943\ttotal: 918ms\tremaining: 1.49s\n","381:\tlearn: 0.0003943\ttotal: 919ms\tremaining: 1.49s\n","382:\tlearn: 0.0003943\ttotal: 921ms\tremaining: 1.48s\n","383:\tlearn: 0.0003943\ttotal: 922ms\tremaining: 1.48s\n","384:\tlearn: 0.0003943\ttotal: 924ms\tremaining: 1.48s\n","385:\tlearn: 0.0003943\ttotal: 926ms\tremaining: 1.47s\n","386:\tlearn: 0.0003943\ttotal: 927ms\tremaining: 1.47s\n","387:\tlearn: 0.0003943\ttotal: 929ms\tremaining: 1.46s\n","388:\tlearn: 0.0003943\ttotal: 930ms\tremaining: 1.46s\n","389:\tlearn: 0.0003943\ttotal: 932ms\tremaining: 1.46s\n","390:\tlearn: 0.0003943\ttotal: 937ms\tremaining: 1.46s\n","391:\tlearn: 0.0003943\ttotal: 939ms\tremaining: 1.46s\n","392:\tlearn: 0.0003943\ttotal: 941ms\tremaining: 1.45s\n","393:\tlearn: 0.0003943\ttotal: 943ms\tremaining: 1.45s\n","394:\tlearn: 0.0003943\ttotal: 945ms\tremaining: 1.45s\n","395:\tlearn: 0.0003943\ttotal: 948ms\tremaining: 1.45s\n","396:\tlearn: 0.0003943\ttotal: 952ms\tremaining: 1.45s\n","397:\tlearn: 0.0003943\ttotal: 954ms\tremaining: 1.44s\n","398:\tlearn: 0.0003943\ttotal: 956ms\tremaining: 1.44s\n","399:\tlearn: 0.0003943\ttotal: 958ms\tremaining: 1.44s\n","400:\tlearn: 0.0003943\ttotal: 960ms\tremaining: 1.43s\n","401:\tlearn: 0.0003943\ttotal: 962ms\tremaining: 1.43s\n","402:\tlearn: 0.0003943\ttotal: 965ms\tremaining: 1.43s\n","403:\tlearn: 0.0003943\ttotal: 967ms\tremaining: 1.43s\n","404:\tlearn: 0.0003943\ttotal: 971ms\tremaining: 1.43s\n","405:\tlearn: 0.0003943\ttotal: 975ms\tremaining: 1.43s\n","406:\tlearn: 0.0003943\ttotal: 982ms\tremaining: 1.43s\n","407:\tlearn: 0.0003943\ttotal: 987ms\tremaining: 1.43s\n","408:\tlearn: 0.0003943\ttotal: 989ms\tremaining: 1.43s\n","409:\tlearn: 0.0003943\ttotal: 990ms\tremaining: 1.43s\n","410:\tlearn: 0.0003943\ttotal: 995ms\tremaining: 1.43s\n","411:\tlearn: 0.0003943\ttotal: 996ms\tremaining: 1.42s\n","412:\tlearn: 0.0003943\ttotal: 997ms\tremaining: 1.42s\n","413:\tlearn: 0.0003943\ttotal: 999ms\tremaining: 1.41s\n","414:\tlearn: 0.0003943\ttotal: 1s\tremaining: 1.41s\n","415:\tlearn: 0.0003943\ttotal: 1s\tremaining: 1.41s\n","416:\tlearn: 0.0003943\ttotal: 1s\tremaining: 1.4s\n","417:\tlearn: 0.0003943\ttotal: 1s\tremaining: 1.4s\n","418:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.4s\n","419:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.39s\n","420:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.39s\n","421:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.39s\n","422:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.38s\n","423:\tlearn: 0.0003943\ttotal: 1.01s\tremaining: 1.38s\n","424:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.38s\n","425:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.37s\n","426:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.37s\n","427:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.36s\n","428:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.36s\n","429:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.36s\n","430:\tlearn: 0.0003943\ttotal: 1.02s\tremaining: 1.35s\n","431:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.35s\n","432:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.35s\n","433:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.34s\n","434:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.34s\n","435:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.34s\n","436:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.33s\n","437:\tlearn: 0.0003943\ttotal: 1.03s\tremaining: 1.33s\n","438:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.32s\n","439:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.32s\n","440:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.32s\n","441:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.31s\n","442:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.31s\n","443:\tlearn: 0.0003943\ttotal: 1.04s\tremaining: 1.31s\n","444:\tlearn: 0.0003943\ttotal: 1.05s\tremaining: 1.31s\n","445:\tlearn: 0.0003943\ttotal: 1.05s\tremaining: 1.31s\n","446:\tlearn: 0.0003943\ttotal: 1.05s\tremaining: 1.3s\n","447:\tlearn: 0.0003943\ttotal: 1.05s\tremaining: 1.3s\n","448:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.3s\n","449:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.29s\n","450:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.29s\n","451:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.29s\n","452:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.28s\n","453:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.28s\n","454:\tlearn: 0.0003943\ttotal: 1.06s\tremaining: 1.27s\n","455:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.27s\n","456:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.27s\n","457:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.27s\n","458:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.26s\n","459:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.26s\n","460:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.25s\n","461:\tlearn: 0.0003943\ttotal: 1.07s\tremaining: 1.25s\n","462:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.25s\n","463:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.25s\n","464:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.24s\n","465:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.24s\n","466:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.24s\n","467:\tlearn: 0.0003943\ttotal: 1.08s\tremaining: 1.23s\n","468:\tlearn: 0.0003943\ttotal: 1.09s\tremaining: 1.23s\n","469:\tlearn: 0.0003943\ttotal: 1.09s\tremaining: 1.23s\n","470:\tlearn: 0.0003943\ttotal: 1.09s\tremaining: 1.23s\n","471:\tlearn: 0.0003943\ttotal: 1.09s\tremaining: 1.22s\n","472:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.22s\n","473:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.22s\n","474:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.21s\n","475:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.21s\n","476:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.21s\n","477:\tlearn: 0.0003943\ttotal: 1.1s\tremaining: 1.21s\n","478:\tlearn: 0.0003943\ttotal: 1.11s\tremaining: 1.2s\n","479:\tlearn: 0.0003943\ttotal: 1.11s\tremaining: 1.2s\n","480:\tlearn: 0.0003943\ttotal: 1.11s\tremaining: 1.2s\n","481:\tlearn: 0.0003943\ttotal: 1.11s\tremaining: 1.2s\n","482:\tlearn: 0.0003943\ttotal: 1.11s\tremaining: 1.19s\n","483:\tlearn: 0.0003943\ttotal: 1.12s\tremaining: 1.19s\n","484:\tlearn: 0.0003943\ttotal: 1.12s\tremaining: 1.19s\n","485:\tlearn: 0.0003943\ttotal: 1.12s\tremaining: 1.18s\n","486:\tlearn: 0.0003943\ttotal: 1.12s\tremaining: 1.18s\n","487:\tlearn: 0.0003943\ttotal: 1.12s\tremaining: 1.18s\n","488:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.18s\n","489:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.17s\n","490:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.17s\n","491:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.17s\n","492:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.16s\n","493:\tlearn: 0.0003943\ttotal: 1.13s\tremaining: 1.16s\n","494:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.16s\n","495:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.15s\n","496:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.15s\n","497:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.15s\n","498:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.15s\n","499:\tlearn: 0.0003943\ttotal: 1.14s\tremaining: 1.14s\n","500:\tlearn: 0.0003943\ttotal: 1.15s\tremaining: 1.14s\n","501:\tlearn: 0.0003943\ttotal: 1.15s\tremaining: 1.14s\n","502:\tlearn: 0.0003943\ttotal: 1.15s\tremaining: 1.14s\n","503:\tlearn: 0.0003943\ttotal: 1.15s\tremaining: 1.14s\n","504:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.13s\n","505:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.13s\n","506:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.13s\n","507:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.12s\n","508:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.12s\n","509:\tlearn: 0.0003943\ttotal: 1.16s\tremaining: 1.12s\n","510:\tlearn: 0.0003943\ttotal: 1.17s\tremaining: 1.12s\n","511:\tlearn: 0.0003943\ttotal: 1.17s\tremaining: 1.11s\n","512:\tlearn: 0.0003943\ttotal: 1.17s\tremaining: 1.11s\n","513:\tlearn: 0.0003943\ttotal: 1.17s\tremaining: 1.11s\n","514:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.11s\n","515:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.1s\n","516:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.1s\n","517:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.1s\n","518:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.1s\n","519:\tlearn: 0.0003943\ttotal: 1.18s\tremaining: 1.09s\n","520:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.09s\n","521:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.09s\n","522:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.08s\n","523:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.08s\n","524:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.08s\n","525:\tlearn: 0.0003943\ttotal: 1.19s\tremaining: 1.07s\n","526:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.07s\n","527:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.07s\n","528:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.07s\n","529:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.06s\n","530:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.06s\n","531:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.06s\n","532:\tlearn: 0.0003943\ttotal: 1.2s\tremaining: 1.05s\n","533:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.05s\n","534:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.05s\n","535:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.05s\n","536:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.04s\n","537:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.04s\n","538:\tlearn: 0.0003943\ttotal: 1.21s\tremaining: 1.04s\n","539:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.03s\n","540:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.03s\n","541:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.03s\n","542:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.02s\n","543:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.02s\n","544:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.02s\n","545:\tlearn: 0.0003943\ttotal: 1.22s\tremaining: 1.02s\n","546:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1.01s\n","547:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1.01s\n","548:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1.01s\n","549:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1s\n","550:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1s\n","551:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 1s\n","552:\tlearn: 0.0003943\ttotal: 1.23s\tremaining: 998ms\n","553:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 995ms\n","554:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 992ms\n","555:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 989ms\n","556:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 986ms\n","557:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 984ms\n","558:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 981ms\n","559:\tlearn: 0.0003943\ttotal: 1.24s\tremaining: 978ms\n","560:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 975ms\n","561:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 972ms\n","562:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 969ms\n","563:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 967ms\n","564:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 964ms\n","565:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 961ms\n","566:\tlearn: 0.0003943\ttotal: 1.25s\tremaining: 958ms\n","567:\tlearn: 0.0003943\ttotal: 1.26s\tremaining: 957ms\n","568:\tlearn: 0.0003943\ttotal: 1.26s\tremaining: 954ms\n","569:\tlearn: 0.0003943\ttotal: 1.26s\tremaining: 951ms\n","570:\tlearn: 0.0003943\ttotal: 1.26s\tremaining: 950ms\n","571:\tlearn: 0.0003943\ttotal: 1.26s\tremaining: 947ms\n","572:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 944ms\n","573:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 941ms\n","574:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 938ms\n","575:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 936ms\n","576:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 933ms\n","577:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 930ms\n","578:\tlearn: 0.0003943\ttotal: 1.27s\tremaining: 927ms\n","579:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 925ms\n","580:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 922ms\n","581:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 920ms\n","582:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 917ms\n","583:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 915ms\n","584:\tlearn: 0.0003943\ttotal: 1.28s\tremaining: 912ms\n","585:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 909ms\n","586:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 906ms\n","587:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 903ms\n","588:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 901ms\n","589:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 898ms\n","590:\tlearn: 0.0003943\ttotal: 1.29s\tremaining: 896ms\n","591:\tlearn: 0.0003943\ttotal: 1.3s\tremaining: 896ms\n","592:\tlearn: 0.0003943\ttotal: 1.3s\tremaining: 895ms\n","593:\tlearn: 0.0003943\ttotal: 1.3s\tremaining: 892ms\n","594:\tlearn: 0.0003943\ttotal: 1.3s\tremaining: 889ms\n","595:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 886ms\n","596:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 883ms\n","597:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 881ms\n","598:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 879ms\n","599:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 876ms\n","600:\tlearn: 0.0003943\ttotal: 1.31s\tremaining: 873ms\n","601:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 870ms\n","602:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 867ms\n","603:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 865ms\n","604:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 863ms\n","605:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 860ms\n","606:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 857ms\n","607:\tlearn: 0.0003943\ttotal: 1.32s\tremaining: 854ms\n","608:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 852ms\n","609:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 849ms\n","610:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 847ms\n","611:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 845ms\n","612:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 842ms\n","613:\tlearn: 0.0003943\ttotal: 1.33s\tremaining: 839ms\n","614:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 837ms\n","615:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 834ms\n","616:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 831ms\n","617:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 829ms\n","618:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 826ms\n","619:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 824ms\n","620:\tlearn: 0.0003943\ttotal: 1.34s\tremaining: 821ms\n","621:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 819ms\n","622:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 816ms\n","623:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 813ms\n","624:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 810ms\n","625:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 808ms\n","626:\tlearn: 0.0003943\ttotal: 1.35s\tremaining: 806ms\n","627:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 803ms\n","628:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 801ms\n","629:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 798ms\n","630:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 795ms\n","631:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 793ms\n","632:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 791ms\n","633:\tlearn: 0.0003943\ttotal: 1.36s\tremaining: 788ms\n","634:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 786ms\n","635:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 783ms\n","636:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 780ms\n","637:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 778ms\n","638:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 776ms\n","639:\tlearn: 0.0003943\ttotal: 1.37s\tremaining: 773ms\n","640:\tlearn: 0.0003943\ttotal: 1.38s\tremaining: 771ms\n","641:\tlearn: 0.0003943\ttotal: 1.38s\tremaining: 768ms\n","642:\tlearn: 0.0003943\ttotal: 1.38s\tremaining: 766ms\n","643:\tlearn: 0.0003943\ttotal: 1.38s\tremaining: 764ms\n","644:\tlearn: 0.0003943\ttotal: 1.39s\tremaining: 762ms\n","645:\tlearn: 0.0003943\ttotal: 1.39s\tremaining: 761ms\n","646:\tlearn: 0.0003943\ttotal: 1.39s\tremaining: 759ms\n","647:\tlearn: 0.0003943\ttotal: 1.4s\tremaining: 758ms\n","648:\tlearn: 0.0003943\ttotal: 1.4s\tremaining: 756ms\n","649:\tlearn: 0.0003943\ttotal: 1.4s\tremaining: 756ms\n","650:\tlearn: 0.0003943\ttotal: 1.4s\tremaining: 753ms\n","651:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 750ms\n","652:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 748ms\n","653:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 745ms\n","654:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 743ms\n","655:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 740ms\n","656:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 738ms\n","657:\tlearn: 0.0003943\ttotal: 1.41s\tremaining: 735ms\n","658:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 733ms\n","659:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 730ms\n","660:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 728ms\n","661:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 725ms\n","662:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 723ms\n","663:\tlearn: 0.0003943\ttotal: 1.42s\tremaining: 721ms\n","664:\tlearn: 0.0003943\ttotal: 1.43s\tremaining: 718ms\n","665:\tlearn: 0.0003943\ttotal: 1.43s\tremaining: 716ms\n","666:\tlearn: 0.0003943\ttotal: 1.43s\tremaining: 714ms\n","667:\tlearn: 0.0003943\ttotal: 1.43s\tremaining: 712ms\n","668:\tlearn: 0.0003943\ttotal: 1.43s\tremaining: 709ms\n","669:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 707ms\n","670:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 704ms\n","671:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 702ms\n","672:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 700ms\n","673:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 697ms\n","674:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 695ms\n","675:\tlearn: 0.0003943\ttotal: 1.44s\tremaining: 692ms\n","676:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 690ms\n","677:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 687ms\n","678:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 685ms\n","679:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 683ms\n","680:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 680ms\n","681:\tlearn: 0.0003943\ttotal: 1.45s\tremaining: 678ms\n","682:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 675ms\n","683:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 673ms\n","684:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 671ms\n","685:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 668ms\n","686:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 666ms\n","687:\tlearn: 0.0003943\ttotal: 1.46s\tremaining: 664ms\n","688:\tlearn: 0.0003943\ttotal: 1.47s\tremaining: 662ms\n","689:\tlearn: 0.0003943\ttotal: 1.47s\tremaining: 660ms\n","690:\tlearn: 0.0003943\ttotal: 1.47s\tremaining: 659ms\n","691:\tlearn: 0.0003943\ttotal: 1.48s\tremaining: 657ms\n","692:\tlearn: 0.0003943\ttotal: 1.49s\tremaining: 659ms\n","693:\tlearn: 0.0003943\ttotal: 1.49s\tremaining: 657ms\n","694:\tlearn: 0.0003943\ttotal: 1.49s\tremaining: 656ms\n","695:\tlearn: 0.0003943\ttotal: 1.5s\tremaining: 654ms\n","696:\tlearn: 0.0003943\ttotal: 1.5s\tremaining: 653ms\n","697:\tlearn: 0.0003943\ttotal: 1.5s\tremaining: 651ms\n","698:\tlearn: 0.0003943\ttotal: 1.51s\tremaining: 650ms\n","699:\tlearn: 0.0003943\ttotal: 1.51s\tremaining: 648ms\n","700:\tlearn: 0.0003943\ttotal: 1.52s\tremaining: 647ms\n","701:\tlearn: 0.0003943\ttotal: 1.52s\tremaining: 645ms\n","702:\tlearn: 0.0003943\ttotal: 1.52s\tremaining: 644ms\n","703:\tlearn: 0.0003943\ttotal: 1.53s\tremaining: 642ms\n","704:\tlearn: 0.0003943\ttotal: 1.53s\tremaining: 641ms\n","705:\tlearn: 0.0003943\ttotal: 1.53s\tremaining: 639ms\n","706:\tlearn: 0.0003943\ttotal: 1.54s\tremaining: 638ms\n","707:\tlearn: 0.0003943\ttotal: 1.54s\tremaining: 636ms\n","708:\tlearn: 0.0003943\ttotal: 1.54s\tremaining: 634ms\n","709:\tlearn: 0.0003943\ttotal: 1.55s\tremaining: 632ms\n","710:\tlearn: 0.0003943\ttotal: 1.55s\tremaining: 630ms\n","711:\tlearn: 0.0003943\ttotal: 1.55s\tremaining: 627ms\n","712:\tlearn: 0.0003943\ttotal: 1.55s\tremaining: 625ms\n","713:\tlearn: 0.0003943\ttotal: 1.55s\tremaining: 623ms\n","714:\tlearn: 0.0003943\ttotal: 1.56s\tremaining: 621ms\n","715:\tlearn: 0.0003943\ttotal: 1.56s\tremaining: 618ms\n","716:\tlearn: 0.0003943\ttotal: 1.56s\tremaining: 616ms\n","717:\tlearn: 0.0003943\ttotal: 1.56s\tremaining: 614ms\n","718:\tlearn: 0.0003943\ttotal: 1.56s\tremaining: 611ms\n","719:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 609ms\n","720:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 607ms\n","721:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 604ms\n","722:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 602ms\n","723:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 599ms\n","724:\tlearn: 0.0003943\ttotal: 1.57s\tremaining: 597ms\n","725:\tlearn: 0.0003943\ttotal: 1.58s\tremaining: 595ms\n","726:\tlearn: 0.0003943\ttotal: 1.58s\tremaining: 592ms\n","727:\tlearn: 0.0003943\ttotal: 1.58s\tremaining: 590ms\n","728:\tlearn: 0.0003943\ttotal: 1.58s\tremaining: 588ms\n","729:\tlearn: 0.0003943\ttotal: 1.58s\tremaining: 585ms\n","730:\tlearn: 0.0003943\ttotal: 1.59s\tremaining: 585ms\n","731:\tlearn: 0.0003943\ttotal: 1.59s\tremaining: 582ms\n","732:\tlearn: 0.0003943\ttotal: 1.59s\tremaining: 580ms\n","733:\tlearn: 0.0003943\ttotal: 1.59s\tremaining: 577ms\n","734:\tlearn: 0.0003943\ttotal: 1.59s\tremaining: 575ms\n","735:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 573ms\n","736:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 570ms\n","737:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 568ms\n","738:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 566ms\n","739:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 563ms\n","740:\tlearn: 0.0003943\ttotal: 1.6s\tremaining: 561ms\n","741:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 559ms\n","742:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 556ms\n","743:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 554ms\n","744:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 552ms\n","745:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 549ms\n","746:\tlearn: 0.0003943\ttotal: 1.61s\tremaining: 547ms\n","747:\tlearn: 0.0003943\ttotal: 1.62s\tremaining: 545ms\n","748:\tlearn: 0.0003943\ttotal: 1.62s\tremaining: 543ms\n","749:\tlearn: 0.0003943\ttotal: 1.62s\tremaining: 540ms\n","750:\tlearn: 0.0003943\ttotal: 1.62s\tremaining: 538ms\n","751:\tlearn: 0.0003943\ttotal: 1.62s\tremaining: 536ms\n","752:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 533ms\n","753:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 531ms\n","754:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 529ms\n","755:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 526ms\n","756:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 524ms\n","757:\tlearn: 0.0003943\ttotal: 1.63s\tremaining: 522ms\n","758:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 519ms\n","759:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 517ms\n","760:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 515ms\n","761:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 512ms\n","762:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 510ms\n","763:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 508ms\n","764:\tlearn: 0.0003943\ttotal: 1.64s\tremaining: 505ms\n","765:\tlearn: 0.0003943\ttotal: 1.65s\tremaining: 503ms\n","766:\tlearn: 0.0003943\ttotal: 1.65s\tremaining: 500ms\n","767:\tlearn: 0.0003943\ttotal: 1.65s\tremaining: 498ms\n","768:\tlearn: 0.0003943\ttotal: 1.65s\tremaining: 496ms\n","769:\tlearn: 0.0003943\ttotal: 1.65s\tremaining: 493ms\n","770:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 492ms\n","771:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 490ms\n","772:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 487ms\n","773:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 485ms\n","774:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 482ms\n","775:\tlearn: 0.0003943\ttotal: 1.66s\tremaining: 480ms\n","776:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 478ms\n","777:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 476ms\n","778:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 473ms\n","779:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 471ms\n","780:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 469ms\n","781:\tlearn: 0.0003943\ttotal: 1.67s\tremaining: 467ms\n","782:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 464ms\n","783:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 462ms\n","784:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 460ms\n","785:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 457ms\n","786:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 455ms\n","787:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 453ms\n","788:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 450ms\n","789:\tlearn: 0.0003943\ttotal: 1.68s\tremaining: 448ms\n","790:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 446ms\n","791:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 443ms\n","792:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 441ms\n","793:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 439ms\n","794:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 437ms\n","795:\tlearn: 0.0003943\ttotal: 1.69s\tremaining: 434ms\n","796:\tlearn: 0.0003943\ttotal: 1.7s\tremaining: 432ms\n","797:\tlearn: 0.0003943\ttotal: 1.7s\tremaining: 430ms\n","798:\tlearn: 0.0003943\ttotal: 1.7s\tremaining: 428ms\n","799:\tlearn: 0.0003943\ttotal: 1.7s\tremaining: 426ms\n","800:\tlearn: 0.0003943\ttotal: 1.71s\tremaining: 424ms\n","801:\tlearn: 0.0003943\ttotal: 1.71s\tremaining: 421ms\n","802:\tlearn: 0.0003943\ttotal: 1.71s\tremaining: 419ms\n","803:\tlearn: 0.0003943\ttotal: 1.71s\tremaining: 417ms\n","804:\tlearn: 0.0003943\ttotal: 1.71s\tremaining: 415ms\n","805:\tlearn: 0.0003943\ttotal: 1.72s\tremaining: 413ms\n","806:\tlearn: 0.0003943\ttotal: 1.72s\tremaining: 411ms\n","807:\tlearn: 0.0003943\ttotal: 1.72s\tremaining: 409ms\n","808:\tlearn: 0.0003943\ttotal: 1.72s\tremaining: 407ms\n","809:\tlearn: 0.0003943\ttotal: 1.73s\tremaining: 405ms\n","810:\tlearn: 0.0003943\ttotal: 1.73s\tremaining: 402ms\n","811:\tlearn: 0.0003943\ttotal: 1.73s\tremaining: 400ms\n","812:\tlearn: 0.0003943\ttotal: 1.73s\tremaining: 398ms\n","813:\tlearn: 0.0003943\ttotal: 1.73s\tremaining: 396ms\n","814:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 394ms\n","815:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 392ms\n","816:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 389ms\n","817:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 387ms\n","818:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 385ms\n","819:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 382ms\n","820:\tlearn: 0.0003943\ttotal: 1.74s\tremaining: 380ms\n","821:\tlearn: 0.0003943\ttotal: 1.75s\tremaining: 379ms\n","822:\tlearn: 0.0003943\ttotal: 1.75s\tremaining: 376ms\n","823:\tlearn: 0.0003943\ttotal: 1.75s\tremaining: 374ms\n","824:\tlearn: 0.0003943\ttotal: 1.75s\tremaining: 372ms\n","825:\tlearn: 0.0003943\ttotal: 1.75s\tremaining: 369ms\n","826:\tlearn: 0.0003943\ttotal: 1.76s\tremaining: 368ms\n","827:\tlearn: 0.0003943\ttotal: 1.76s\tremaining: 366ms\n","828:\tlearn: 0.0003943\ttotal: 1.76s\tremaining: 364ms\n","829:\tlearn: 0.0003943\ttotal: 1.76s\tremaining: 362ms\n","830:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 359ms\n","831:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 357ms\n","832:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 355ms\n","833:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 353ms\n","834:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 350ms\n","835:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 348ms\n","836:\tlearn: 0.0003943\ttotal: 1.77s\tremaining: 346ms\n","837:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 344ms\n","838:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 341ms\n","839:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 339ms\n","840:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 337ms\n","841:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 335ms\n","842:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 332ms\n","843:\tlearn: 0.0003943\ttotal: 1.78s\tremaining: 330ms\n","844:\tlearn: 0.0003943\ttotal: 1.79s\tremaining: 328ms\n","845:\tlearn: 0.0003943\ttotal: 1.79s\tremaining: 326ms\n","846:\tlearn: 0.0003943\ttotal: 1.79s\tremaining: 324ms\n","847:\tlearn: 0.0003943\ttotal: 1.79s\tremaining: 321ms\n","848:\tlearn: 0.0003943\ttotal: 1.79s\tremaining: 319ms\n","849:\tlearn: 0.0003943\ttotal: 1.8s\tremaining: 318ms\n","850:\tlearn: 0.0003943\ttotal: 1.8s\tremaining: 316ms\n","851:\tlearn: 0.0003943\ttotal: 1.81s\tremaining: 314ms\n","852:\tlearn: 0.0003943\ttotal: 1.81s\tremaining: 312ms\n","853:\tlearn: 0.0003943\ttotal: 1.81s\tremaining: 310ms\n","854:\tlearn: 0.0003943\ttotal: 1.82s\tremaining: 308ms\n","855:\tlearn: 0.0003943\ttotal: 1.83s\tremaining: 307ms\n","856:\tlearn: 0.0003943\ttotal: 1.84s\tremaining: 308ms\n","857:\tlearn: 0.0003943\ttotal: 1.84s\tremaining: 305ms\n","858:\tlearn: 0.0003943\ttotal: 1.86s\tremaining: 306ms\n","859:\tlearn: 0.0003943\ttotal: 1.87s\tremaining: 304ms\n","860:\tlearn: 0.0003943\ttotal: 1.87s\tremaining: 302ms\n","861:\tlearn: 0.0003943\ttotal: 1.88s\tremaining: 301ms\n","862:\tlearn: 0.0003943\ttotal: 1.88s\tremaining: 299ms\n","863:\tlearn: 0.0003943\ttotal: 1.89s\tremaining: 297ms\n","864:\tlearn: 0.0003943\ttotal: 1.89s\tremaining: 295ms\n","865:\tlearn: 0.0003943\ttotal: 1.89s\tremaining: 293ms\n","866:\tlearn: 0.0003943\ttotal: 1.9s\tremaining: 291ms\n","867:\tlearn: 0.0003943\ttotal: 1.9s\tremaining: 289ms\n","868:\tlearn: 0.0003943\ttotal: 1.9s\tremaining: 287ms\n","869:\tlearn: 0.0003943\ttotal: 1.91s\tremaining: 285ms\n","870:\tlearn: 0.0003943\ttotal: 1.91s\tremaining: 283ms\n","871:\tlearn: 0.0003943\ttotal: 1.91s\tremaining: 281ms\n","872:\tlearn: 0.0003943\ttotal: 1.92s\tremaining: 279ms\n","873:\tlearn: 0.0003943\ttotal: 1.92s\tremaining: 278ms\n","874:\tlearn: 0.0003943\ttotal: 1.93s\tremaining: 275ms\n","875:\tlearn: 0.0003943\ttotal: 1.93s\tremaining: 273ms\n","876:\tlearn: 0.0003943\ttotal: 1.93s\tremaining: 271ms\n","877:\tlearn: 0.0003943\ttotal: 1.94s\tremaining: 269ms\n","878:\tlearn: 0.0003943\ttotal: 1.94s\tremaining: 267ms\n","879:\tlearn: 0.0003943\ttotal: 1.94s\tremaining: 265ms\n","880:\tlearn: 0.0003943\ttotal: 1.95s\tremaining: 263ms\n","881:\tlearn: 0.0003943\ttotal: 1.95s\tremaining: 261ms\n","882:\tlearn: 0.0003943\ttotal: 1.96s\tremaining: 259ms\n","883:\tlearn: 0.0003943\ttotal: 1.96s\tremaining: 257ms\n","884:\tlearn: 0.0003943\ttotal: 1.97s\tremaining: 255ms\n","885:\tlearn: 0.0003943\ttotal: 1.98s\tremaining: 255ms\n","886:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 253ms\n","887:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 251ms\n","888:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 248ms\n","889:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 246ms\n","890:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 244ms\n","891:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 241ms\n","892:\tlearn: 0.0003943\ttotal: 1.99s\tremaining: 239ms\n","893:\tlearn: 0.0003943\ttotal: 2s\tremaining: 237ms\n","894:\tlearn: 0.0003943\ttotal: 2s\tremaining: 234ms\n","895:\tlearn: 0.0003943\ttotal: 2s\tremaining: 232ms\n","896:\tlearn: 0.0003943\ttotal: 2s\tremaining: 230ms\n","897:\tlearn: 0.0003943\ttotal: 2s\tremaining: 228ms\n","898:\tlearn: 0.0003943\ttotal: 2s\tremaining: 225ms\n","899:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 223ms\n","900:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 221ms\n","901:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 218ms\n","902:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 216ms\n","903:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 214ms\n","904:\tlearn: 0.0003943\ttotal: 2.01s\tremaining: 211ms\n","905:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 209ms\n","906:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 207ms\n","907:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 205ms\n","908:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 202ms\n","909:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 200ms\n","910:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 198ms\n","911:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 195ms\n","912:\tlearn: 0.0003943\ttotal: 2.02s\tremaining: 193ms\n","913:\tlearn: 0.0003943\ttotal: 2.03s\tremaining: 191ms\n","914:\tlearn: 0.0003943\ttotal: 2.03s\tremaining: 188ms\n","915:\tlearn: 0.0003943\ttotal: 2.03s\tremaining: 186ms\n","916:\tlearn: 0.0003943\ttotal: 2.03s\tremaining: 184ms\n","917:\tlearn: 0.0003943\ttotal: 2.03s\tremaining: 182ms\n","918:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 179ms\n","919:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 177ms\n","920:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 175ms\n","921:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 173ms\n","922:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 171ms\n","923:\tlearn: 0.0003943\ttotal: 2.04s\tremaining: 168ms\n","924:\tlearn: 0.0003943\ttotal: 2.05s\tremaining: 166ms\n","925:\tlearn: 0.0003943\ttotal: 2.05s\tremaining: 164ms\n","926:\tlearn: 0.0003943\ttotal: 2.06s\tremaining: 162ms\n","927:\tlearn: 0.0003943\ttotal: 2.06s\tremaining: 160ms\n","928:\tlearn: 0.0003943\ttotal: 2.07s\tremaining: 158ms\n","929:\tlearn: 0.0003943\ttotal: 2.07s\tremaining: 156ms\n","930:\tlearn: 0.0003943\ttotal: 2.08s\tremaining: 154ms\n","931:\tlearn: 0.0003943\ttotal: 2.08s\tremaining: 152ms\n","932:\tlearn: 0.0003943\ttotal: 2.08s\tremaining: 150ms\n","933:\tlearn: 0.0003943\ttotal: 2.08s\tremaining: 147ms\n","934:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 145ms\n","935:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 143ms\n","936:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 140ms\n","937:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 138ms\n","938:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 136ms\n","939:\tlearn: 0.0003943\ttotal: 2.09s\tremaining: 134ms\n","940:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 131ms\n","941:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 129ms\n","942:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 127ms\n","943:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 125ms\n","944:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 122ms\n","945:\tlearn: 0.0003943\ttotal: 2.1s\tremaining: 120ms\n","946:\tlearn: 0.0003943\ttotal: 2.11s\tremaining: 118ms\n","947:\tlearn: 0.0003943\ttotal: 2.11s\tremaining: 116ms\n","948:\tlearn: 0.0003943\ttotal: 2.11s\tremaining: 113ms\n","949:\tlearn: 0.0003943\ttotal: 2.11s\tremaining: 111ms\n","950:\tlearn: 0.0003943\ttotal: 2.11s\tremaining: 109ms\n","951:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 107ms\n","952:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 104ms\n","953:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 102ms\n","954:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 99.9ms\n","955:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 97.7ms\n","956:\tlearn: 0.0003943\ttotal: 2.12s\tremaining: 95.5ms\n","957:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 93.2ms\n","958:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 90.9ms\n","959:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 88.7ms\n","960:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 86.5ms\n","961:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 84.3ms\n","962:\tlearn: 0.0003943\ttotal: 2.13s\tremaining: 82ms\n","963:\tlearn: 0.0003943\ttotal: 2.14s\tremaining: 79.8ms\n","964:\tlearn: 0.0003943\ttotal: 2.14s\tremaining: 77.6ms\n","965:\tlearn: 0.0003943\ttotal: 2.14s\tremaining: 75.3ms\n","966:\tlearn: 0.0003943\ttotal: 2.14s\tremaining: 73.1ms\n","967:\tlearn: 0.0003943\ttotal: 2.14s\tremaining: 70.9ms\n","968:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 68.6ms\n","969:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 66.4ms\n","970:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 64.2ms\n","971:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 61.9ms\n","972:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 59.7ms\n","973:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 57.5ms\n","974:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 55.2ms\n","975:\tlearn: 0.0003943\ttotal: 2.15s\tremaining: 53ms\n","976:\tlearn: 0.0003943\ttotal: 2.16s\tremaining: 50.8ms\n","977:\tlearn: 0.0003943\ttotal: 2.16s\tremaining: 48.6ms\n","978:\tlearn: 0.0003943\ttotal: 2.16s\tremaining: 46.3ms\n","979:\tlearn: 0.0003943\ttotal: 2.16s\tremaining: 44.1ms\n","980:\tlearn: 0.0003943\ttotal: 2.16s\tremaining: 41.9ms\n","981:\tlearn: 0.0003943\ttotal: 2.17s\tremaining: 39.7ms\n","982:\tlearn: 0.0003943\ttotal: 2.17s\tremaining: 37.5ms\n","983:\tlearn: 0.0003943\ttotal: 2.17s\tremaining: 35.4ms\n","984:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 33.1ms\n","985:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 30.9ms\n","986:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 28.7ms\n","987:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 26.5ms\n","988:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 24.3ms\n","989:\tlearn: 0.0003943\ttotal: 2.18s\tremaining: 22.1ms\n","990:\tlearn: 0.0003943\ttotal: 2.19s\tremaining: 19.9ms\n","991:\tlearn: 0.0003943\ttotal: 2.19s\tremaining: 17.6ms\n","992:\tlearn: 0.0003943\ttotal: 2.19s\tremaining: 15.4ms\n","993:\tlearn: 0.0003943\ttotal: 2.2s\tremaining: 13.3ms\n","994:\tlearn: 0.0003943\ttotal: 2.2s\tremaining: 11.1ms\n","995:\tlearn: 0.0003943\ttotal: 2.2s\tremaining: 8.86ms\n","996:\tlearn: 0.0003943\ttotal: 2.21s\tremaining: 6.64ms\n","997:\tlearn: 0.0003943\ttotal: 2.21s\tremaining: 4.42ms\n","998:\tlearn: 0.0003943\ttotal: 2.21s\tremaining: 2.21ms\n","999:\tlearn: 0.0003943\ttotal: 2.21s\tremaining: 0us\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.08      0.29      0.12         7\n","        PASS       0.94      0.76      0.84        97\n","\n","    accuracy                           0.73       104\n","   macro avg       0.51      0.52      0.48       104\n","weighted avg       0.88      0.73      0.79       104\n","\n","Confusion Matrix:\n","[[ 2  5]\n"," [23 74]]\n"]}],"source":["from catboost import CatBoostClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Initialize CatBoost classifier\n","catboost_clf = CatBoostClassifier(learning_rate=3)\n","\n","# Fit the model on the training data\n","catboost_clf.fit(x_train, y_train)\n","\n","# Predict on the test set\n","y_pred = catboost_clf.predict(x_test)\n","\n","# Evaluate the model\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"uLaPk9Up5Cox","executionInfo":{"status":"ok","timestamp":1737707282326,"user_tz":-420,"elapsed":10,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":["# from catboost import CatBoostClassifier\n","# from sklearn.model_selection import GridSearchCV\n","# from sklearn.metrics import classification_report, confusion_matrix\n","\n","# # Initialize CatBoost classifier\n","# catboost_clf = CatBoostClassifier()\n","\n","# # Tentukan daftar hyperparameter yang ingin diuji\n","# param_grid = {\n","#     'learning_rate': [1, 2, 3, 4, 5, 6, 7],\n","#     'depth': [4, 6, 8],\n","# }\n","\n","# # Inisialisasi GridSearchCV dengan model, hyperparameter grid, dan jumlah lipatan cross-validation\n","# grid_search_cb = GridSearchCV(catboost_clf, param_grid, cv=5, scoring='recall')\n","\n","# # Latih model dengan melakukan pencarian grid\n","# grid_search_cb.fit(x_train, y_train)\n","\n","# # Ambil model dengan kombinasi hyperparameter terbaik\n","# best_catboost = grid_search_cb.best_estimator_\n","\n","# # Prediksi menggunakan model yang dioptimalkan\n","# y_pred = best_catboost.predict(x_test)\n","\n","# # Ubah tipe data label prediksi menjadi string\n","# y_pred_labels = y_pred.astype(str)\n","# y_test_labels = y_test.astype(str)\n","\n","# # Tampilkan hasil evaluasi\n","# print(\"Best Parameters:\", grid_search_cb.best_params_)\n","# print(\"\\nClassification Report:\")\n","# print(classification_report(y_test_labels, y_pred_labels))\n","\n","# print(\"\\nConfusion Matrix:\")\n","# print(confusion_matrix(y_test_labels, y_pred_labels))"]},{"cell_type":"markdown","metadata":{"id":"epW3YeCL1Uuo"},"source":["### 3.10 ADABOOST"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"JWiZyN6Mzs8n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1737707283130,"user_tz":-420,"elapsed":813,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}},"outputId":"1888c5d0-4813-4b07-8898-f44a6f92bbde"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.10      1.00      0.18         7\n","        PASS       1.00      0.34      0.51        97\n","\n","    accuracy                           0.38       104\n","   macro avg       0.55      0.67      0.34       104\n","weighted avg       0.94      0.38      0.49       104\n","\n","Confusion Matrix:\n","[[ 7  0]\n"," [64 33]]\n"]}],"source":["from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","\n","ada_clf = AdaBoostClassifier(learning_rate=7, n_estimators=100, random_state=2022)\n","\n","ada_clf.fit(x_train, y_train)\n","\n","\n","y_pred = ada_clf.predict(x_test)\n","\n","\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"_w5TVXVZ2snW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1737707285020,"user_tz":-420,"elapsed":1898,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}},"outputId":"dc607d17-8529-4c64-fe64-8ede2374188a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","        FAIL       0.14      0.71      0.24         7\n","        PASS       0.97      0.69      0.81        97\n","\n","    accuracy                           0.69       104\n","   macro avg       0.56      0.70      0.52       104\n","weighted avg       0.92      0.69      0.77       104\n","\n","Confusion Matrix:\n","[[ 5  2]\n"," [30 67]]\n","Best parameters found:  {'learning_rate': 1}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1107: UserWarning: One or more of the test scores are non-finite: [nan nan nan]\n","  warnings.warn(\n"]}],"source":["from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.model_selection import GridSearchCV\n","import numpy as np\n","\n","\n","# Define the parameter grid for hyperparameter tuning\n","param_grid = {\n","    'learning_rate': [1, 2, 3,]\n","}\n","\n","# Initialize AdaBoost classifier\n","ada_clf = AdaBoostClassifier(random_state=2022)\n","\n","# Initialize GridSearchCV with recall scoring\n","grid_search = GridSearchCV(estimator=ada_clf, param_grid=param_grid, cv=5, scoring='recall', n_jobs=-1)\n","\n","# Fit the model on the training data\n","grid_search.fit(x_train, y_train)\n","\n","# Get the best estimator\n","best_ada_clf = grid_search.best_estimator_\n","\n","# Predict on the test set\n","y_pred = best_ada_clf.predict(x_test)\n","\n","\n","# Evaluate the model\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","\n","# Print the best parameters\n","print(\"Best parameters found: \", grid_search.best_params_)"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"6EL38t5o-Xf3","executionInfo":{"status":"ok","timestamp":1737707285021,"user_tz":-420,"elapsed":16,"user":{"displayName":"polaris ai","userId":"13768565794035999878"}}},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[{"file_id":"1KD_ER59MwLuQ1jQuRAxQlY-XiWQ7pjGM","timestamp":1735143734677},{"file_id":"1-UEjH--Bmi8SwN03v2SHyZQ-lASMqRNG","timestamp":1734428944348},{"file_id":"1nEpqDi_JN1JHk--U1GLsrL6pbXqkF_nL","timestamp":1733903310707},{"file_id":"1Ld8dEQoN0bF4biGggVwNDW3cAZb41PPJ","timestamp":1730640301325},{"file_id":"1uuho0IAtT46r750cVDCg9vSi4xNmIUay","timestamp":1730450001011},{"file_id":"1uP7zbbJPoPSfkipVWqJ3_jD2JkFPfv7Z","timestamp":1729776836588},{"file_id":"1Y-KhE6vBw2jKyh0ecWDXxmdhHEKbGwgH","timestamp":1729155646922},{"file_id":"1W4PKx_ca35LQVOJ_EeEdKu7X6wP4l4jP","timestamp":1728197982292},{"file_id":"1EUFw3gYgJOwKQ2E1NiEQKydyVjJa_3zC","timestamp":1725616182206}],"toc_visible":true,"gpuClass":"premium"},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}